/*
 * The MIT License
 *
 * Copyright 2017 Olivier.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package UI;

import Music.Alteration;
import Instrument.Guitar;
import Instrument.Key;
import Instrument.KeyState;
import Music.Note;
import Instrument.Piano;
import KeyUtils.Corner;
import KeyUtils.RectangleKeyShape;
import KeyUtils.TriangleKeyShape;
import KeyUtils.Vector2;
import Manager.CanvasManagerDelegate;
import Manager.GaudrophoneController;
import Manager.GaudrophoneControllerDelegate;
import Manager.SelectionManagerDelegate;
import Manager.State;
import Music.AudioClip;
import Music.SoundType;
import Music.SynthesizedSound;
import Music.WaveFormType;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ComponentEvent;
import java.awt.event.ItemEvent;
import java.io.File;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

public class Window extends javax.swing.JFrame implements GaudrophoneControllerDelegate, SelectionManagerDelegate, CanvasManagerDelegate {
    Canvas canvas = new Canvas(Manager.GaudrophoneController.getController().getCanvasManager());

    public Window() {
        initComponents();
        fileDialog.setCurrentDirectory(new File(System.getProperty("user.home")));
        noteProperties.setVisible(true);
        audioClipProperties.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        keyTypeButtonGroup = new javax.swing.ButtonGroup();
        alterationButtonGroup = new javax.swing.ButtonGroup();
        fileDialog = new javax.swing.JFileChooser();
        splitWindow = new javax.swing.JSplitPane();
        instrumentPanel = new javax.swing.JPanel();
        canvasPannel = new javax.swing.Box.Filler(new java.awt.Dimension(300, 100), new java.awt.Dimension(600, 600), new java.awt.Dimension(3000, 3000));
        editPannel = new javax.swing.JScrollPane();
        tabbedPane = new javax.swing.JTabbedPane();
        visualPanel = new javax.swing.JPanel();
        visualWrapper = new javax.swing.JPanel();
        informationWrapper = new javax.swing.JPanel();
        informationTitle = new javax.swing.JLabel();
        keyNameProperty = new javax.swing.JPanel();
        keyNameLabel = new javax.swing.JLabel();
        keyNameField = new javax.swing.JTextField();
        showNameProperty = new javax.swing.JPanel();
        showNoteNameLabel = new javax.swing.JLabel();
        displayNameCheckBox = new javax.swing.JCheckBox();
        displayNoteCheckBox = new javax.swing.JCheckBox();
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 32767));
        displayOctaveCheckBox = new javax.swing.JCheckBox();
        displayAlterationCheckBox = new javax.swing.JCheckBox();
        sizeWrapper = new javax.swing.JPanel();
        sizeTitleWrapper = new javax.swing.JPanel();
        colorTitle1 = new javax.swing.JLabel();
        positionProperty = new javax.swing.JPanel();
        xLabel = new javax.swing.JLabel();
        xSpinner = new javax.swing.JSpinner();
        yLabel = new javax.swing.JLabel();
        ySpinner = new javax.swing.JSpinner();
        sizeProperty = new javax.swing.JPanel();
        widthLabel = new javax.swing.JLabel();
        widthSpinner = new javax.swing.JSpinner();
        heightLabel = new javax.swing.JLabel();
        heightSpinner = new javax.swing.JSpinner();
        depthProperty = new javax.swing.JPanel();
        zLabel = new javax.swing.JLabel();
        zSpinner = new javax.swing.JSpinner();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        filler8 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        colorsPanel = new javax.swing.JPanel();
        colorWrapper = new javax.swing.JPanel();
        colorTitle = new javax.swing.JLabel();
        normalWrapper = new javax.swing.JPanel();
        normalTitle = new javax.swing.JLabel();
        normalProperty = new javax.swing.JPanel();
        backgroundLabel = new javax.swing.JLabel();
        backgroundSpacer = new javax.swing.JPanel();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        backgroundDisplayLabel = new javax.swing.JLabel();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        textColorInfoLabel = new javax.swing.JLabel();
        textColorSpacer = new javax.swing.JPanel();
        filler10 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        textColorDisplayLabel = new javax.swing.JLabel();
        filler11 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        sunkenWrapper = new javax.swing.JPanel();
        sunkenTitle = new javax.swing.JLabel();
        sunkenProperty = new javax.swing.JPanel();
        backgroundSunkenLabel = new javax.swing.JLabel();
        sunkenSpacer = new javax.swing.JPanel();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        backgroundSunkenDisplayLabel = new javax.swing.JLabel();
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        textSunkenColorLabel = new javax.swing.JLabel();
        textSunkenColorSpacer = new javax.swing.JPanel();
        filler12 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        textSunkenColorDisplayLabel = new javax.swing.JLabel();
        filler13 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        borderPanel = new javax.swing.JPanel();
        linesWrapper = new javax.swing.JPanel();
        borderWrapper = new javax.swing.JPanel();
        borderTitle = new javax.swing.JLabel();
        linesSelectionWrapper = new javax.swing.JPanel();
        borderSelectLabel = new javax.swing.JLabel();
        borderComboBox = new javax.swing.JComboBox<>();
        lineControlWrapper = new javax.swing.JPanel();
        lineThicknessWrapper = new javax.swing.JPanel();
        lineThicknessLabel = new javax.swing.JLabel();
        lineThicknessSpinner = new javax.swing.JSpinner();
        lineColorWrapper = new javax.swing.JPanel();
        lineColorLabel = new javax.swing.JLabel();
        LineColorSpacer = new javax.swing.JPanel();
        lineColorEditButton = new javax.swing.JLabel();
        audioPanel = new javax.swing.JPanel();
        KeyProperties = new javax.swing.JPanel();
        generalProperties = new javax.swing.JPanel();
        hauteurTitlePanel = new javax.swing.JPanel();
        hauteurTitle = new javax.swing.JLabel();
        noteNameProperty = new javax.swing.JPanel();
        noteNameLabel = new javax.swing.JLabel();
        noteComboBox = new javax.swing.JComboBox(Note.values());
        octaveLabel = new javax.swing.JLabel();
        octaveSpinner = new javax.swing.JSpinner();
        alterationProperty = new javax.swing.JPanel();
        alterationLabel = new javax.swing.JLabel();
        flatRadioButton = new javax.swing.JRadioButton();
        naturalRadioButton = new javax.swing.JRadioButton();
        sharpRadioButton = new javax.swing.JRadioButton();
        envelopeProperties = new javax.swing.JPanel();
        envelopeTitlePanel = new javax.swing.JPanel();
        envelopeLabel = new javax.swing.JLabel();
        volumeProperty = new javax.swing.JPanel();
        volumeLabel = new javax.swing.JLabel();
        volumeSlider = new javax.swing.JSlider();
        volumeSpinner = new javax.swing.JSpinner();
        envelopeGraph = new UI.EnvelopeGraph();
        envelopeSliders = new javax.swing.JPanel();
        attackSliderPanel = new javax.swing.JPanel();
        attackSlider = new javax.swing.JSlider();
        attackSpinner = new javax.swing.JSpinner();
        attackLabel = new javax.swing.JLabel();
        decaySliderPanel = new javax.swing.JPanel();
        decaySlider = new javax.swing.JSlider();
        decaySpinner = new javax.swing.JSpinner();
        decayLabel = new javax.swing.JLabel();
        sustainSliderPanel = new javax.swing.JPanel();
        sustainSlider = new javax.swing.JSlider();
        sustainSpinner = new javax.swing.JSpinner();
        sustainLabel = new javax.swing.JLabel();
        releaseSliderPanel = new javax.swing.JPanel();
        releaseSlider = new javax.swing.JSlider();
        releaseSpinner = new javax.swing.JSpinner();
        releaseLabel = new javax.swing.JLabel();
        timbreTitlePanel = new javax.swing.JPanel();
        timbreTitle = new javax.swing.JLabel();
        typeProperty = new javax.swing.JPanel();
        synthRadioButton = new javax.swing.JRadioButton();
        audioClipRadioButton = new javax.swing.JRadioButton();
        noteProperties = new javax.swing.JPanel();
        frequencyProperty = new javax.swing.JPanel();
        frequencyLabel = new javax.swing.JLabel();
        frequencySpinner = new javax.swing.JSpinner();
        tuningProperty = new javax.swing.JPanel();
        tuningLabel = new javax.swing.JLabel();
        tuningSpinner = new javax.swing.JSpinner();
        waveFormProperty = new javax.swing.JPanel();
        waveFormLabel = new javax.swing.JLabel();
        waveformComboBox = new javax.swing.JComboBox(WaveFormType.values());
        audioClipProperties = new javax.swing.JPanel();
        audioClipFileProperty = new javax.swing.JPanel();
        audioClipFileLabel = new javax.swing.JLabel();
        audioClipPathLabel = new javax.swing.JLabel();
        audioClipSelectButton = new java.awt.Button();
        readSpeedProperty = new javax.swing.JPanel();
        readSpeedLabel = new javax.swing.JLabel();
        readSpeedSpinner = new javax.swing.JSpinner();
        playPannel = new javax.swing.JScrollPane();
        visualPanel4 = new javax.swing.JPanel();
        visualWrapper4 = new javax.swing.JPanel();
        keyNameProperty8 = new javax.swing.JPanel();
        keyNameLabel8 = new javax.swing.JLabel();
        bpmSpinner = new javax.swing.JSpinner();
        songPannel = new javax.swing.JScrollPane();
        globalEditPannel = new javax.swing.JScrollPane();
        visualPanel3 = new javax.swing.JPanel();
        visualWrapper3 = new javax.swing.JPanel();
        informationWrapper3 = new javax.swing.JPanel();
        informationTitle3 = new javax.swing.JLabel();
        keyNameProperty3 = new javax.swing.JPanel();
        keyNameLabel3 = new javax.swing.JLabel();
        instrumentNameField = new javax.swing.JTextField();
        keyNameProperty4 = new javax.swing.JPanel();
        keyNameLabel4 = new javax.swing.JLabel();
        masterWaveformComboBox = new javax.swing.JComboBox(WaveFormType.values());
        insertPannel = new javax.swing.JScrollPane();
        visualPanel5 = new javax.swing.JPanel();
        visualWrapper5 = new javax.swing.JPanel();
        informationWrapper4 = new javax.swing.JPanel();
        informationTitle4 = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        filler16 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 32767));
        buttonPlayMode = new javax.swing.JButton();
        buttonEditKey = new javax.swing.JButton();
        buttonAutoPlay = new javax.swing.JButton();
        buttonInsert = new javax.swing.JButton();
        filler7 = new javax.swing.Box.Filler(new java.awt.Dimension(40, 0), new java.awt.Dimension(40, 0), new java.awt.Dimension(40, 32767));
        playTools = new javax.swing.JPanel();
        metronomeButton = new javax.swing.JButton();
        autoPlayTools = new javax.swing.JPanel();
        togglePlayButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        muteButton = new javax.swing.JButton();
        selectedKeyTools = new javax.swing.JPanel();
        addPointButton = new javax.swing.JButton();
        buttonDuplicate = new javax.swing.JButton();
        buttonMidi = new javax.swing.JButton();
        buttonAddImage = new javax.swing.JButton();
        buttonRemoveImage = new javax.swing.JButton();
        buttonAddSunkenImage = new javax.swing.JButton();
        buttonRemoveSunkenImage = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();
        filler9 = new javax.swing.Box.Filler(new java.awt.Dimension(40, 0), new java.awt.Dimension(40, 0), new java.awt.Dimension(40, 32767));
        instrumentNameTextField = new javax.swing.JTextField();
        searchTextField = new javax.swing.JTextField();
        filler17 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 32767));
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenuItem = new javax.swing.JMenu();
        newMenu = new javax.swing.JMenu();
        newBlankMenuItem = new javax.swing.JMenuItem();
        newGuitarMenuItem = new javax.swing.JMenuItem();
        newPianoMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        openSongMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        refreshMidi = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        quitMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menuEditNext = new javax.swing.JMenuItem();
        menuEditPrevious = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuEditDelete = new javax.swing.JMenuItem();
        menuEditDuplicate = new javax.swing.JMenuItem();
        insertMenuItem = new javax.swing.JMenu();
        createRectangleMenuItem = new javax.swing.JMenuItem();
        createTriangleMenuItem = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        menuModePlay = new javax.swing.JMenuItem();
        menuModeEditKey = new javax.swing.JMenuItem();
        menuModeAutoPlay = new javax.swing.JMenuItem();
        menuModeInsert = new javax.swing.JMenuItem();

        fileDialog.setCurrentDirectory(new java.io.File("/"));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gaudrophone");
        setBackground(new java.awt.Color(65, 65, 65));
        setLocation(new java.awt.Point(100, 100));
        setMinimumSize(new java.awt.Dimension(500, 300));
        setPreferredSize(new java.awt.Dimension(959, 760));

        splitWindow.setBackground(new java.awt.Color(51, 51, 51));
        splitWindow.setBorder(null);
        splitWindow.setDividerLocation(300);
        splitWindow.setContinuousLayout(true);
        splitWindow.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        splitWindow.setPreferredSize(new java.awt.Dimension(959, 700));

        instrumentPanel.setBackground(new java.awt.Color(102, 102, 102));
        instrumentPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51), 4));
        instrumentPanel.setLayout(new java.awt.BorderLayout());
        instrumentPanel.add(canvasPannel, java.awt.BorderLayout.CENTER);

        splitWindow.setLeftComponent(instrumentPanel);

        editPannel.setBackground(new java.awt.Color(65, 65, 65));
        editPannel.setBorder(null);
        editPannel.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        editPannel.setAutoscrolls(true);
        editPannel.setMinimumSize(new java.awt.Dimension(415, 200));
        editPannel.setPreferredSize(new java.awt.Dimension(415, 200));

        tabbedPane.setBackground(new java.awt.Color(65, 65, 65));
        tabbedPane.setForeground(new java.awt.Color(255, 255, 255));
        tabbedPane.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        tabbedPane.setMinimumSize(new java.awt.Dimension(400, 100));
        tabbedPane.setOpaque(true);
        tabbedPane.setPreferredSize(new java.awt.Dimension(400, 670));

        visualPanel.setBackground(new java.awt.Color(65, 65, 65));
        visualPanel.setMinimumSize(new java.awt.Dimension(600, 655));
        visualPanel.setPreferredSize(new java.awt.Dimension(50, 200));
        visualPanel.setLayout(new javax.swing.BoxLayout(visualPanel, javax.swing.BoxLayout.LINE_AXIS));

        visualWrapper.setBackground(new java.awt.Color(65, 65, 65));
        visualWrapper.setLayout(new javax.swing.BoxLayout(visualWrapper, javax.swing.BoxLayout.Y_AXIS));

        informationWrapper.setBackground(new java.awt.Color(65, 65, 65));
        informationWrapper.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        informationWrapper.setPreferredSize(new java.awt.Dimension(50, 20));
        informationWrapper.setLayout(new java.awt.GridLayout(1, 0));

        informationTitle.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        informationTitle.setForeground(new java.awt.Color(255, 255, 255));
        informationTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        informationTitle.setText("Général");
        informationTitle.setToolTipText("");
        informationTitle.setPreferredSize(new java.awt.Dimension(72, 20));
        informationWrapper.add(informationTitle);

        visualWrapper.add(informationWrapper);

        keyNameProperty.setBackground(new java.awt.Color(65, 65, 65));
        keyNameProperty.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        keyNameProperty.setMinimumSize(new java.awt.Dimension(125, 32));
        keyNameProperty.setPreferredSize(new java.awt.Dimension(375, 0));
        keyNameProperty.setLayout(new java.awt.GridLayout(1, 0));

        keyNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        keyNameLabel.setText("Nom de la touche :");
        keyNameLabel.setMinimumSize(new java.awt.Dimension(40, 16));
        keyNameLabel.setPreferredSize(new java.awt.Dimension(0, 0));
        keyNameProperty.add(keyNameLabel);

        keyNameField.setBackground(new java.awt.Color(238, 238, 238));
        keyNameField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        keyNameField.setText("Nom de la touche");
        keyNameField.setBorder(null);
        keyNameField.setMinimumSize(new java.awt.Dimension(30, 26));
        keyNameField.setPreferredSize(new java.awt.Dimension(0, 0));
        keyNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                keyNameFieldKeyReleased(evt);
            }
        });
        keyNameProperty.add(keyNameField);

        visualWrapper.add(keyNameProperty);

        showNameProperty.setBackground(new java.awt.Color(65, 65, 65));
        showNameProperty.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        showNameProperty.setForeground(new java.awt.Color(255, 255, 255));
        showNameProperty.setMinimumSize(new java.awt.Dimension(128, 100));
        showNameProperty.setPreferredSize(new java.awt.Dimension(375, 40));
        showNameProperty.setLayout(new java.awt.GridLayout(2, 0));

        showNoteNameLabel.setBackground(new java.awt.Color(65, 65, 65));
        showNoteNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        showNoteNameLabel.setText("Affichage :");
        showNoteNameLabel.setToolTipText("");
        showNoteNameLabel.setMinimumSize(new java.awt.Dimension(40, 16));
        showNoteNameLabel.setOpaque(true);
        showNoteNameLabel.setPreferredSize(new java.awt.Dimension(40, 26));
        showNameProperty.add(showNoteNameLabel);

        displayNameCheckBox.setBackground(new java.awt.Color(65, 65, 65));
        displayNameCheckBox.setForeground(new java.awt.Color(255, 255, 255));
        displayNameCheckBox.setSelected(true);
        displayNameCheckBox.setText("Nom");
        displayNameCheckBox.setMinimumSize(new java.awt.Dimension(40, 26));
        displayNameCheckBox.setPreferredSize(new java.awt.Dimension(40, 26));
        displayNameCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                displayNameCheckBoxItemStateChanged(evt);
            }
        });
        showNameProperty.add(displayNameCheckBox);

        displayNoteCheckBox.setBackground(new java.awt.Color(65, 65, 65));
        displayNoteCheckBox.setForeground(new java.awt.Color(255, 255, 255));
        displayNoteCheckBox.setSelected(true);
        displayNoteCheckBox.setText("Note");
        displayNoteCheckBox.setMinimumSize(new java.awt.Dimension(40, 26));
        displayNoteCheckBox.setPreferredSize(new java.awt.Dimension(40, 26));
        displayNoteCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                displayNoteCheckBoxItemStateChanged(evt);
            }
        });
        showNameProperty.add(displayNoteCheckBox);
        showNameProperty.add(filler6);

        displayOctaveCheckBox.setBackground(new java.awt.Color(65, 65, 65));
        displayOctaveCheckBox.setForeground(new java.awt.Color(255, 255, 255));
        displayOctaveCheckBox.setSelected(true);
        displayOctaveCheckBox.setText("Octave");
        displayOctaveCheckBox.setMinimumSize(new java.awt.Dimension(40, 26));
        displayOctaveCheckBox.setPreferredSize(new java.awt.Dimension(40, 26));
        displayOctaveCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                displayOctaveCheckBoxItemStateChanged(evt);
            }
        });
        showNameProperty.add(displayOctaveCheckBox);

        displayAlterationCheckBox.setBackground(new java.awt.Color(65, 65, 65));
        displayAlterationCheckBox.setForeground(new java.awt.Color(255, 255, 255));
        displayAlterationCheckBox.setText("Altération");
        displayAlterationCheckBox.setMinimumSize(new java.awt.Dimension(40, 26));
        displayAlterationCheckBox.setPreferredSize(new java.awt.Dimension(40, 26));
        displayAlterationCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                displayAlterationCheckBoxItemStateChanged(evt);
            }
        });
        showNameProperty.add(displayAlterationCheckBox);

        visualWrapper.add(showNameProperty);

        sizeWrapper.setBackground(new java.awt.Color(65, 65, 65));
        sizeWrapper.setLayout(new javax.swing.BoxLayout(sizeWrapper, javax.swing.BoxLayout.PAGE_AXIS));

        sizeTitleWrapper.setBackground(new java.awt.Color(65, 65, 65));
        sizeTitleWrapper.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        sizeTitleWrapper.setPreferredSize(new java.awt.Dimension(50, 20));
        sizeTitleWrapper.setLayout(new java.awt.GridLayout(1, 0));

        colorTitle1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        colorTitle1.setForeground(new java.awt.Color(255, 255, 255));
        colorTitle1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        colorTitle1.setText("Coordonnées");
        colorTitle1.setToolTipText("");
        colorTitle1.setPreferredSize(new java.awt.Dimension(72, 0));
        sizeTitleWrapper.add(colorTitle1);

        sizeWrapper.add(sizeTitleWrapper);

        positionProperty.setBackground(new java.awt.Color(65, 65, 65));
        positionProperty.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        positionProperty.setMinimumSize(new java.awt.Dimension(125, 32));
        positionProperty.setPreferredSize(new java.awt.Dimension(0, 0));
        positionProperty.setLayout(new java.awt.GridLayout(1, 10, 10, 0));

        xLabel.setBackground(new java.awt.Color(65, 65, 65));
        xLabel.setForeground(new java.awt.Color(255, 255, 255));
        xLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        xLabel.setText("X :");
        xLabel.setOpaque(true);
        positionProperty.add(xLabel);

        xSpinner.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 1.0d));
        xSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                xSpinnerStateChanged(evt);
            }
        });
        positionProperty.add(xSpinner);

        yLabel.setBackground(new java.awt.Color(65, 65, 65));
        yLabel.setForeground(new java.awt.Color(255, 255, 255));
        yLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        yLabel.setText("Y :");
        yLabel.setOpaque(true);
        positionProperty.add(yLabel);

        ySpinner.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 1.0d));
        ySpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ySpinnerStateChanged(evt);
            }
        });
        positionProperty.add(ySpinner);

        sizeWrapper.add(positionProperty);

        sizeProperty.setBackground(new java.awt.Color(65, 65, 65));
        sizeProperty.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        sizeProperty.setMinimumSize(new java.awt.Dimension(125, 32));
        sizeProperty.setPreferredSize(new java.awt.Dimension(0, 0));
        sizeProperty.setLayout(new java.awt.GridLayout(1, 10, 10, 0));

        widthLabel.setBackground(new java.awt.Color(65, 65, 65));
        widthLabel.setForeground(new java.awt.Color(255, 255, 255));
        widthLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        widthLabel.setText("Largeur :");
        widthLabel.setOpaque(true);
        sizeProperty.add(widthLabel);

        widthSpinner.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 1.0d));
        widthSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                widthSpinnerStateChanged(evt);
            }
        });
        sizeProperty.add(widthSpinner);

        heightLabel.setBackground(new java.awt.Color(65, 65, 65));
        heightLabel.setForeground(new java.awt.Color(255, 255, 255));
        heightLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        heightLabel.setText("Hauteur :");
        heightLabel.setOpaque(true);
        sizeProperty.add(heightLabel);

        heightSpinner.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 1.0d));
        heightSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                heightSpinnerStateChanged(evt);
            }
        });
        sizeProperty.add(heightSpinner);

        sizeWrapper.add(sizeProperty);

        depthProperty.setBackground(new java.awt.Color(65, 65, 65));
        depthProperty.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        depthProperty.setMinimumSize(new java.awt.Dimension(125, 32));
        depthProperty.setPreferredSize(new java.awt.Dimension(0, 0));
        depthProperty.setLayout(new java.awt.GridLayout(1, 10, 10, 0));

        zLabel.setBackground(new java.awt.Color(65, 65, 65));
        zLabel.setForeground(new java.awt.Color(255, 255, 255));
        zLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        zLabel.setText("Z-index :");
        zLabel.setOpaque(true);
        depthProperty.add(zLabel);

        zSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        zSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                zSpinnerStateChanged(evt);
            }
        });
        depthProperty.add(zSpinner);
        depthProperty.add(filler1);
        depthProperty.add(filler8);

        sizeWrapper.add(depthProperty);

        visualWrapper.add(sizeWrapper);

        colorsPanel.setBackground(new java.awt.Color(65, 65, 65));
        colorsPanel.setPreferredSize(new java.awt.Dimension(0, 0));
        colorsPanel.setLayout(new javax.swing.BoxLayout(colorsPanel, javax.swing.BoxLayout.PAGE_AXIS));

        colorWrapper.setBackground(new java.awt.Color(65, 65, 65));
        colorWrapper.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        colorWrapper.setPreferredSize(new java.awt.Dimension(50, 20));
        colorWrapper.setLayout(new java.awt.GridLayout(1, 0));

        colorTitle.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        colorTitle.setForeground(new java.awt.Color(255, 255, 255));
        colorTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        colorTitle.setText("Couleurs");
        colorTitle.setToolTipText("");
        colorTitle.setPreferredSize(new java.awt.Dimension(72, 0));
        colorWrapper.add(colorTitle);

        colorsPanel.add(colorWrapper);

        normalWrapper.setBackground(new java.awt.Color(65, 65, 65));
        normalWrapper.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        normalWrapper.setPreferredSize(new java.awt.Dimension(50, 0));
        normalWrapper.setLayout(new java.awt.GridLayout(1, 0));

        normalTitle.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        normalTitle.setForeground(new java.awt.Color(255, 255, 255));
        normalTitle.setText("Normal");
        normalTitle.setToolTipText("");
        normalTitle.setPreferredSize(new java.awt.Dimension(72, 0));
        normalWrapper.add(normalTitle);

        colorsPanel.add(normalWrapper);

        normalProperty.setBackground(new java.awt.Color(65, 65, 65));
        normalProperty.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        normalProperty.setMinimumSize(new java.awt.Dimension(125, 32));
        normalProperty.setPreferredSize(new java.awt.Dimension(0, 0));
        normalProperty.setLayout(new java.awt.GridLayout(1, 10, 10, 0));

        backgroundLabel.setBackground(new java.awt.Color(65, 65, 65));
        backgroundLabel.setForeground(new java.awt.Color(255, 255, 255));
        backgroundLabel.setText("Arrière-plan :");
        backgroundLabel.setOpaque(true);
        normalProperty.add(backgroundLabel);

        backgroundSpacer.setBackground(new java.awt.Color(65, 65, 65));
        backgroundSpacer.setLayout(new java.awt.GridLayout(1, 0));

        filler2.setBackground(new java.awt.Color(65, 65, 65));
        backgroundSpacer.add(filler2);

        backgroundDisplayLabel.setBackground(new java.awt.Color(65, 65, 65));
        backgroundDisplayLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        backgroundDisplayLabel.setToolTipText("");
        backgroundDisplayLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        backgroundDisplayLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        backgroundDisplayLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        backgroundDisplayLabel.setOpaque(true);
        backgroundDisplayLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backgroundDisplayLabelMouseClicked(evt);
            }
        });
        backgroundSpacer.add(backgroundDisplayLabel);

        filler3.setBackground(new java.awt.Color(65, 65, 65));
        backgroundSpacer.add(filler3);

        normalProperty.add(backgroundSpacer);

        textColorInfoLabel.setBackground(new java.awt.Color(65, 65, 65));
        textColorInfoLabel.setForeground(new java.awt.Color(255, 255, 255));
        textColorInfoLabel.setText("Texte :");
        textColorInfoLabel.setOpaque(true);
        normalProperty.add(textColorInfoLabel);

        textColorSpacer.setBackground(new java.awt.Color(65, 65, 65));
        textColorSpacer.setLayout(new java.awt.GridLayout(1, 0));

        filler10.setBackground(new java.awt.Color(65, 65, 65));
        textColorSpacer.add(filler10);

        textColorDisplayLabel.setBackground(new java.awt.Color(65, 65, 65));
        textColorDisplayLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        textColorDisplayLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        textColorDisplayLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        textColorDisplayLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        textColorDisplayLabel.setOpaque(true);
        textColorDisplayLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                textColorDisplayLabelMouseClicked(evt);
            }
        });
        textColorSpacer.add(textColorDisplayLabel);

        filler11.setBackground(new java.awt.Color(65, 65, 65));
        textColorSpacer.add(filler11);

        normalProperty.add(textColorSpacer);

        colorsPanel.add(normalProperty);

        sunkenWrapper.setBackground(new java.awt.Color(65, 65, 65));
        sunkenWrapper.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        sunkenWrapper.setPreferredSize(new java.awt.Dimension(50, 0));
        sunkenWrapper.setLayout(new java.awt.GridLayout(1, 0));

        sunkenTitle.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        sunkenTitle.setForeground(new java.awt.Color(255, 255, 255));
        sunkenTitle.setText("Enfoncé");
        sunkenTitle.setToolTipText("");
        sunkenTitle.setPreferredSize(new java.awt.Dimension(72, 0));
        sunkenWrapper.add(sunkenTitle);

        colorsPanel.add(sunkenWrapper);

        sunkenProperty.setBackground(new java.awt.Color(65, 65, 65));
        sunkenProperty.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        sunkenProperty.setMinimumSize(new java.awt.Dimension(125, 32));
        sunkenProperty.setPreferredSize(new java.awt.Dimension(0, 0));
        sunkenProperty.setLayout(new java.awt.GridLayout(1, 0, 10, 0));

        backgroundSunkenLabel.setBackground(new java.awt.Color(65, 65, 65));
        backgroundSunkenLabel.setForeground(new java.awt.Color(255, 255, 255));
        backgroundSunkenLabel.setText("Arrière-plan");
        backgroundSunkenLabel.setOpaque(true);
        sunkenProperty.add(backgroundSunkenLabel);

        sunkenSpacer.setBackground(new java.awt.Color(65, 65, 65));
        sunkenSpacer.setLayout(new java.awt.GridLayout(1, 0));

        filler4.setBackground(new java.awt.Color(65, 65, 65));
        sunkenSpacer.add(filler4);

        backgroundSunkenDisplayLabel.setBackground(new java.awt.Color(65, 65, 65));
        backgroundSunkenDisplayLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        backgroundSunkenDisplayLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        backgroundSunkenDisplayLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        backgroundSunkenDisplayLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        backgroundSunkenDisplayLabel.setOpaque(true);
        backgroundSunkenDisplayLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backgroundSunkenDisplayLabelMouseClicked(evt);
            }
        });
        sunkenSpacer.add(backgroundSunkenDisplayLabel);

        filler5.setBackground(new java.awt.Color(65, 65, 65));
        sunkenSpacer.add(filler5);

        sunkenProperty.add(sunkenSpacer);

        textSunkenColorLabel.setBackground(new java.awt.Color(65, 65, 65));
        textSunkenColorLabel.setForeground(new java.awt.Color(255, 255, 255));
        textSunkenColorLabel.setText("Texte");
        textSunkenColorLabel.setOpaque(true);
        sunkenProperty.add(textSunkenColorLabel);

        textSunkenColorSpacer.setBackground(new java.awt.Color(65, 65, 65));
        textSunkenColorSpacer.setLayout(new java.awt.GridLayout(1, 0));

        filler12.setBackground(new java.awt.Color(65, 65, 65));
        textSunkenColorSpacer.add(filler12);

        textSunkenColorDisplayLabel.setBackground(new java.awt.Color(65, 65, 65));
        textSunkenColorDisplayLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        textSunkenColorDisplayLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        textSunkenColorDisplayLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        textSunkenColorDisplayLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        textSunkenColorDisplayLabel.setOpaque(true);
        textSunkenColorDisplayLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                textSunkenColorDisplayLabelMouseClicked(evt);
            }
        });
        textSunkenColorSpacer.add(textSunkenColorDisplayLabel);

        filler13.setBackground(new java.awt.Color(65, 65, 65));
        textSunkenColorSpacer.add(filler13);

        sunkenProperty.add(textSunkenColorSpacer);

        colorsPanel.add(sunkenProperty);

        visualWrapper.add(colorsPanel);

        borderPanel.setBackground(new java.awt.Color(65, 65, 65));
        borderPanel.setLayout(new javax.swing.BoxLayout(borderPanel, javax.swing.BoxLayout.LINE_AXIS));

        linesWrapper.setBackground(new java.awt.Color(65, 65, 65));
        linesWrapper.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        linesWrapper.setLayout(new javax.swing.BoxLayout(linesWrapper, javax.swing.BoxLayout.PAGE_AXIS));

        borderWrapper.setBackground(new java.awt.Color(65, 65, 65));
        borderWrapper.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        borderWrapper.setPreferredSize(new java.awt.Dimension(50, 20));
        borderWrapper.setLayout(new java.awt.GridLayout(1, 0));

        borderTitle.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        borderTitle.setForeground(new java.awt.Color(255, 255, 255));
        borderTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        borderTitle.setText("Bordures");
        borderTitle.setToolTipText("");
        borderTitle.setPreferredSize(new java.awt.Dimension(72, 0));
        borderWrapper.add(borderTitle);

        linesWrapper.add(borderWrapper);

        linesSelectionWrapper.setBackground(new java.awt.Color(65, 65, 65));
        linesSelectionWrapper.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        linesSelectionWrapper.setMinimumSize(new java.awt.Dimension(0, 0));
        linesSelectionWrapper.setPreferredSize(new java.awt.Dimension(0, 0));
        java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0);
        flowLayout1.setAlignOnBaseline(true);
        linesSelectionWrapper.setLayout(flowLayout1);

        borderSelectLabel.setBackground(new java.awt.Color(65, 65, 65));
        borderSelectLabel.setForeground(new java.awt.Color(255, 255, 255));
        borderSelectLabel.setText("Sélection de ligne :");
        borderSelectLabel.setPreferredSize(new java.awt.Dimension(150, 16));
        linesSelectionWrapper.add(borderSelectLabel);

        borderComboBox.setMinimumSize(new java.awt.Dimension(100, 27));
        borderComboBox.setPreferredSize(new java.awt.Dimension(200, 27));
        borderComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borderComboBoxActionPerformed(evt);
            }
        });
        linesSelectionWrapper.add(borderComboBox);

        linesWrapper.add(linesSelectionWrapper);

        lineControlWrapper.setBackground(new java.awt.Color(65, 65, 65));
        lineControlWrapper.setLayout(new javax.swing.BoxLayout(lineControlWrapper, javax.swing.BoxLayout.PAGE_AXIS));

        lineThicknessWrapper.setBackground(new java.awt.Color(65, 65, 65));
        lineThicknessWrapper.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        lineThicknessWrapper.setPreferredSize(new java.awt.Dimension(0, 0));
        lineThicknessWrapper.setLayout(new java.awt.GridLayout(1, 0));

        lineThicknessLabel.setBackground(new java.awt.Color(65, 65, 65));
        lineThicknessLabel.setForeground(new java.awt.Color(255, 255, 255));
        lineThicknessLabel.setText("Épaisseur :");
        lineThicknessWrapper.add(lineThicknessLabel);

        lineThicknessSpinner.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 15000.0d, 0.2d));
        lineThicknessSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                lineThicknessSpinnerStateChanged(evt);
            }
        });
        lineThicknessWrapper.add(lineThicknessSpinner);

        lineControlWrapper.add(lineThicknessWrapper);

        lineColorWrapper.setBackground(new java.awt.Color(65, 65, 65));
        lineColorWrapper.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        lineColorWrapper.setPreferredSize(new java.awt.Dimension(0, 0));
        lineColorWrapper.setLayout(new java.awt.GridLayout(1, 0));

        lineColorLabel.setBackground(new java.awt.Color(65, 65, 65));
        lineColorLabel.setForeground(new java.awt.Color(255, 255, 255));
        lineColorLabel.setText("Couleur :");
        lineColorWrapper.add(lineColorLabel);

        LineColorSpacer.setBackground(new java.awt.Color(65, 65, 65));
        LineColorSpacer.setLayout(new java.awt.GridLayout(1, 0));

        lineColorEditButton.setBackground(new java.awt.Color(65, 65, 65));
        lineColorEditButton.setForeground(new java.awt.Color(255, 255, 255));
        lineColorEditButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lineColorEditButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        lineColorEditButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lineColorEditButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lineColorEditButton.setOpaque(true);
        lineColorEditButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lineColorEditButtonMouseClicked(evt);
            }
        });
        LineColorSpacer.add(lineColorEditButton);

        lineColorWrapper.add(LineColorSpacer);

        lineControlWrapper.add(lineColorWrapper);

        linesWrapper.add(lineControlWrapper);

        borderPanel.add(linesWrapper);

        visualWrapper.add(borderPanel);

        visualPanel.add(visualWrapper);

        tabbedPane.addTab("Visuel", visualPanel);

        audioPanel.setBackground(new java.awt.Color(65, 65, 65));
        audioPanel.setMinimumSize(new java.awt.Dimension(50, 200));
        audioPanel.setPreferredSize(new java.awt.Dimension(50, 200));
        audioPanel.setLayout(new javax.swing.BoxLayout(audioPanel, javax.swing.BoxLayout.LINE_AXIS));

        KeyProperties.setBackground(new java.awt.Color(65, 65, 65));
        KeyProperties.setMinimumSize(new java.awt.Dimension(300, 200));
        KeyProperties.setPreferredSize(new java.awt.Dimension(415, 200));
        KeyProperties.setLayout(new javax.swing.BoxLayout(KeyProperties, javax.swing.BoxLayout.Y_AXIS));

        generalProperties.setBackground(new java.awt.Color(65, 65, 65));
        generalProperties.setMinimumSize(new java.awt.Dimension(50, 200));
        generalProperties.setPreferredSize(new java.awt.Dimension(50, 200));
        generalProperties.setLayout(new javax.swing.BoxLayout(generalProperties, javax.swing.BoxLayout.Y_AXIS));

        hauteurTitlePanel.setBackground(new java.awt.Color(65, 65, 65));
        hauteurTitlePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        hauteurTitlePanel.setPreferredSize(new java.awt.Dimension(50, 46));
        hauteurTitlePanel.setLayout(new java.awt.GridLayout(1, 0));

        hauteurTitle.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        hauteurTitle.setForeground(new java.awt.Color(255, 255, 255));
        hauteurTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hauteurTitle.setText("Hauteur");
        hauteurTitle.setToolTipText("");
        hauteurTitle.setPreferredSize(new java.awt.Dimension(72, 26));
        hauteurTitlePanel.add(hauteurTitle);

        generalProperties.add(hauteurTitlePanel);

        noteNameProperty.setBackground(new java.awt.Color(65, 65, 65));
        noteNameProperty.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        noteNameProperty.setForeground(new java.awt.Color(255, 255, 255));
        noteNameProperty.setMinimumSize(new java.awt.Dimension(125, 32));
        noteNameProperty.setPreferredSize(new java.awt.Dimension(50, 32));
        noteNameProperty.setLayout(new java.awt.GridLayout(1, 0));

        noteNameLabel.setBackground(new java.awt.Color(65, 65, 65));
        noteNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        noteNameLabel.setText("Note :");
        noteNameProperty.add(noteNameLabel);

        noteComboBox.setMinimumSize(new java.awt.Dimension(30, 26));
        noteComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noteComboBoxActionPerformed(evt);
            }
        });
        noteNameProperty.add(noteComboBox);

        octaveLabel.setForeground(new java.awt.Color(255, 255, 255));
        octaveLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        octaveLabel.setText("Octave :");
        noteNameProperty.add(octaveLabel);

        octaveSpinner.setModel(new javax.swing.SpinnerNumberModel(4, 0, 8, 1));
        octaveSpinner.setMinimumSize(new java.awt.Dimension(30, 26));
        octaveSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                octaveSpinnerStateChanged(evt);
            }
        });
        noteNameProperty.add(octaveSpinner);

        generalProperties.add(noteNameProperty);

        alterationProperty.setBackground(new java.awt.Color(65, 65, 65));
        alterationProperty.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        alterationProperty.setMinimumSize(new java.awt.Dimension(125, 32));
        alterationProperty.setPreferredSize(new java.awt.Dimension(50, 32));
        alterationProperty.setLayout(new java.awt.GridLayout(1, 0));

        alterationLabel.setBackground(new java.awt.Color(65, 65, 65));
        alterationLabel.setForeground(new java.awt.Color(255, 255, 255));
        alterationLabel.setText("Altération :");
        alterationProperty.add(alterationLabel);

        flatRadioButton.setBackground(new java.awt.Color(65, 65, 65));
        alterationButtonGroup.add(flatRadioButton);
        flatRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        flatRadioButton.setText("Bémol");
        flatRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flatRadioButtonActionPerformed(evt);
            }
        });
        alterationProperty.add(flatRadioButton);

        naturalRadioButton.setBackground(new java.awt.Color(65, 65, 65));
        alterationButtonGroup.add(naturalRadioButton);
        naturalRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        naturalRadioButton.setText("Naturelle");
        naturalRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                naturalRadioButtonActionPerformed(evt);
            }
        });
        alterationProperty.add(naturalRadioButton);

        sharpRadioButton.setBackground(new java.awt.Color(65, 65, 65));
        alterationButtonGroup.add(sharpRadioButton);
        sharpRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        sharpRadioButton.setText("Dièse");
        sharpRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sharpRadioButtonActionPerformed(evt);
            }
        });
        alterationProperty.add(sharpRadioButton);

        generalProperties.add(alterationProperty);

        envelopeProperties.setBackground(new java.awt.Color(65, 65, 65));
        envelopeProperties.setPreferredSize(new java.awt.Dimension(50, 399));
        envelopeProperties.setLayout(new javax.swing.BoxLayout(envelopeProperties, javax.swing.BoxLayout.Y_AXIS));

        envelopeTitlePanel.setBackground(new java.awt.Color(65, 65, 65));
        envelopeTitlePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        envelopeTitlePanel.setPreferredSize(new java.awt.Dimension(50, 46));
        envelopeTitlePanel.setLayout(new java.awt.GridLayout(1, 0));

        envelopeLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        envelopeLabel.setForeground(new java.awt.Color(255, 255, 255));
        envelopeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        envelopeLabel.setText("Enveloppe");
        envelopeLabel.setToolTipText("");
        envelopeLabel.setMaximumSize(new java.awt.Dimension(117, 100));
        envelopeLabel.setPreferredSize(new java.awt.Dimension(72, 150));
        envelopeTitlePanel.add(envelopeLabel);

        envelopeProperties.add(envelopeTitlePanel);

        volumeProperty.setBackground(new java.awt.Color(65, 65, 65));
        volumeProperty.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        volumeProperty.setMinimumSize(new java.awt.Dimension(125, 32));
        volumeProperty.setPreferredSize(new java.awt.Dimension(50, 32));
        volumeProperty.setLayout(new java.awt.GridLayout(1, 4));

        volumeLabel.setBackground(new java.awt.Color(65, 65, 65));
        volumeLabel.setForeground(new java.awt.Color(255, 255, 255));
        volumeLabel.setText("Volume :");
        volumeLabel.setOpaque(true);
        volumeProperty.add(volumeLabel);

        volumeSlider.setBackground(new java.awt.Color(65, 65, 65));
        volumeSlider.setForeground(new java.awt.Color(255, 255, 255));
        volumeSlider.setMinimumSize(new java.awt.Dimension(100, 29));
        volumeSlider.setPreferredSize(new java.awt.Dimension(400, 29));

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, volumeSpinner, org.jdesktop.beansbinding.ELProperty.create("${value}"), volumeSlider, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        volumeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                volumeSliderStateChanged(evt);
            }
        });
        volumeProperty.add(volumeSlider);

        volumeSpinner.setModel(new javax.swing.SpinnerNumberModel(100, 0, 100, 1));
        volumeSpinner.setMinimumSize(new java.awt.Dimension(100, 26));
        volumeSpinner.setPreferredSize(new java.awt.Dimension(150, 26));
        volumeSpinner.setValue(100);
        volumeProperty.add(volumeSpinner);

        envelopeProperties.add(volumeProperty);

        envelopeGraph.setBackground(new java.awt.Color(51, 51, 51));
        envelopeGraph.setMinimumSize(new java.awt.Dimension(50, 100));
        envelopeGraph.setPreferredSize(new java.awt.Dimension(50, 125));

        javax.swing.GroupLayout envelopeGraphLayout = new javax.swing.GroupLayout(envelopeGraph);
        envelopeGraph.setLayout(envelopeGraphLayout);
        envelopeGraphLayout.setHorizontalGroup(
            envelopeGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );
        envelopeGraphLayout.setVerticalGroup(
            envelopeGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        envelopeProperties.add(envelopeGraph);

        envelopeSliders.setBackground(new java.awt.Color(65, 65, 65));
        envelopeSliders.setPreferredSize(new java.awt.Dimension(50, 242));
        envelopeSliders.setLayout(new javax.swing.BoxLayout(envelopeSliders, javax.swing.BoxLayout.X_AXIS));

        attackSliderPanel.setBackground(new java.awt.Color(65, 65, 65));
        attackSliderPanel.setLayout(new java.awt.BorderLayout());

        attackSlider.setBackground(new java.awt.Color(65, 65, 65));
        attackSlider.setForeground(new java.awt.Color(255, 255, 255));
        attackSlider.setMaximum(5000);
        attackSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        attackSlider.setMaximumSize(new java.awt.Dimension(50, 32767));
        attackSlider.setMinimumSize(new java.awt.Dimension(20, 50));
        attackSlider.setPreferredSize(new java.awt.Dimension(50, 200));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, attackSpinner, org.jdesktop.beansbinding.ELProperty.create("${value}"), attackSlider, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        attackSliderPanel.add(attackSlider, java.awt.BorderLayout.CENTER);
        attackSlider.setBackground(new Color(65, 65, 65));

        attackSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 5000, 1));
        attackSpinner.setMinimumSize(new java.awt.Dimension(20, 26));
        attackSpinner.setPreferredSize(new java.awt.Dimension(20, 26));
        attackSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                attackSpinnerStateChanged(evt);
            }
        });
        attackSliderPanel.add(attackSpinner, java.awt.BorderLayout.PAGE_START);
        attackSpinner.setBackground(new Color(65, 65, 65));

        attackLabel.setBackground(new java.awt.Color(65, 65, 65));
        attackLabel.setForeground(new java.awt.Color(255, 255, 255));
        attackLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        attackLabel.setLabelFor(attackSlider);
        attackLabel.setText("Attack");
        attackLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        attackLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        attackLabel.setMinimumSize(new java.awt.Dimension(20, 26));
        attackLabel.setOpaque(true);
        attackSliderPanel.add(attackLabel, java.awt.BorderLayout.PAGE_END);

        envelopeSliders.add(attackSliderPanel);

        decaySliderPanel.setBackground(new java.awt.Color(65, 65, 65));
        decaySliderPanel.setLayout(new java.awt.BorderLayout());

        decaySlider.setBackground(new java.awt.Color(65, 65, 65));
        decaySlider.setForeground(new java.awt.Color(255, 255, 255));
        decaySlider.setMaximum(5000);
        decaySlider.setOrientation(javax.swing.JSlider.VERTICAL);
        decaySlider.setMaximumSize(new java.awt.Dimension(50, 32767));
        decaySlider.setMinimumSize(new java.awt.Dimension(20, 50));
        decaySlider.setPreferredSize(new java.awt.Dimension(50, 200));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, decaySpinner, org.jdesktop.beansbinding.ELProperty.create("${value}"), decaySlider, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        decaySliderPanel.add(decaySlider, java.awt.BorderLayout.CENTER);

        decaySpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 5000, 1));
        decaySpinner.setMinimumSize(new java.awt.Dimension(20, 26));
        decaySpinner.setPreferredSize(new java.awt.Dimension(20, 26));
        decaySpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                decaySpinnerStateChanged(evt);
            }
        });
        decaySliderPanel.add(decaySpinner, java.awt.BorderLayout.PAGE_START);
        decaySpinner.setBackground(new Color(65, 65, 65));

        decayLabel.setBackground(new java.awt.Color(65, 65, 65));
        decayLabel.setForeground(new java.awt.Color(255, 255, 255));
        decayLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        decayLabel.setLabelFor(attackSlider);
        decayLabel.setText("Decay");
        decayLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        decayLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        decayLabel.setMinimumSize(new java.awt.Dimension(20, 26));
        decayLabel.setOpaque(true);
        decaySliderPanel.add(decayLabel, java.awt.BorderLayout.PAGE_END);

        envelopeSliders.add(decaySliderPanel);

        sustainSliderPanel.setBackground(new java.awt.Color(65, 65, 65));
        sustainSliderPanel.setLayout(new java.awt.BorderLayout());

        sustainSlider.setBackground(new java.awt.Color(65, 65, 65));
        sustainSlider.setForeground(new java.awt.Color(255, 255, 255));
        sustainSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        sustainSlider.setMaximumSize(new java.awt.Dimension(50, 32767));
        sustainSlider.setMinimumSize(new java.awt.Dimension(20, 50));
        sustainSlider.setPreferredSize(new java.awt.Dimension(50, 200));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, sustainSpinner, org.jdesktop.beansbinding.ELProperty.create("${value}"), sustainSlider, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        sustainSliderPanel.add(sustainSlider, java.awt.BorderLayout.CENTER);

        sustainSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 1));
        sustainSpinner.setMinimumSize(new java.awt.Dimension(20, 26));
        sustainSpinner.setPreferredSize(new java.awt.Dimension(20, 26));
        sustainSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sustainSpinnerStateChanged(evt);
            }
        });
        sustainSliderPanel.add(sustainSpinner, java.awt.BorderLayout.PAGE_START);
        sustainSpinner.setBackground(new Color(65, 65, 65));

        sustainLabel.setBackground(new java.awt.Color(65, 65, 65));
        sustainLabel.setForeground(new java.awt.Color(255, 255, 255));
        sustainLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sustainLabel.setLabelFor(attackSlider);
        sustainLabel.setText("Sustain");
        sustainLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        sustainLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sustainLabel.setMinimumSize(new java.awt.Dimension(20, 26));
        sustainLabel.setOpaque(true);
        sustainSliderPanel.add(sustainLabel, java.awt.BorderLayout.PAGE_END);

        envelopeSliders.add(sustainSliderPanel);

        releaseSliderPanel.setBackground(new java.awt.Color(65, 65, 65));
        releaseSliderPanel.setLayout(new java.awt.BorderLayout());

        releaseSlider.setBackground(new java.awt.Color(65, 65, 65));
        releaseSlider.setForeground(new java.awt.Color(255, 255, 255));
        releaseSlider.setMaximum(5000);
        releaseSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        releaseSlider.setMaximumSize(new java.awt.Dimension(50, 32767));
        releaseSlider.setMinimumSize(new java.awt.Dimension(20, 50));
        releaseSlider.setPreferredSize(new java.awt.Dimension(50, 200));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, releaseSpinner, org.jdesktop.beansbinding.ELProperty.create("${value}"), releaseSlider, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        releaseSliderPanel.add(releaseSlider, java.awt.BorderLayout.CENTER);

        releaseSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 5000, 1));
        releaseSpinner.setMinimumSize(new java.awt.Dimension(20, 26));
        releaseSpinner.setPreferredSize(new java.awt.Dimension(20, 26));
        releaseSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                releaseSpinnerStateChanged(evt);
            }
        });
        releaseSliderPanel.add(releaseSpinner, java.awt.BorderLayout.PAGE_START);
        releaseSpinner.setBackground(new Color(65, 65, 65));

        releaseLabel.setBackground(new java.awt.Color(65, 65, 65));
        releaseLabel.setForeground(new java.awt.Color(255, 255, 255));
        releaseLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        releaseLabel.setLabelFor(attackSlider);
        releaseLabel.setText("Release");
        releaseLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        releaseLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        releaseLabel.setMinimumSize(new java.awt.Dimension(20, 26));
        releaseLabel.setOpaque(true);
        releaseSliderPanel.add(releaseLabel, java.awt.BorderLayout.PAGE_END);

        envelopeSliders.add(releaseSliderPanel);

        envelopeProperties.add(envelopeSliders);
        envelopeSliders.setBackground(new Color(65, 65, 65));

        generalProperties.add(envelopeProperties);

        timbreTitlePanel.setBackground(new java.awt.Color(65, 65, 65));
        timbreTitlePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        timbreTitlePanel.setPreferredSize(new java.awt.Dimension(50, 46));
        timbreTitlePanel.setLayout(new java.awt.GridLayout(1, 0));

        timbreTitle.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        timbreTitle.setForeground(new java.awt.Color(255, 255, 255));
        timbreTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timbreTitle.setText("Timbre");
        timbreTitle.setToolTipText("");
        timbreTitle.setPreferredSize(new java.awt.Dimension(72, 26));
        timbreTitlePanel.add(timbreTitle);

        generalProperties.add(timbreTitlePanel);

        typeProperty.setBackground(new java.awt.Color(65, 65, 65));
        typeProperty.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        typeProperty.setMinimumSize(new java.awt.Dimension(125, 32));
        typeProperty.setPreferredSize(new java.awt.Dimension(50, 32));
        typeProperty.setLayout(new java.awt.GridLayout(1, 0));

        synthRadioButton.setBackground(new java.awt.Color(65, 65, 65));
        keyTypeButtonGroup.add(synthRadioButton);
        synthRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        synthRadioButton.setText("Son");
        synthRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                synthRadioButtonItemStateChanged(evt);
            }
        });
        typeProperty.add(synthRadioButton);

        audioClipRadioButton.setBackground(new java.awt.Color(65, 65, 65));
        keyTypeButtonGroup.add(audioClipRadioButton);
        audioClipRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        audioClipRadioButton.setText("Fichier Audio");
        typeProperty.add(audioClipRadioButton);

        generalProperties.add(typeProperty);

        KeyProperties.add(generalProperties);

        noteProperties.setBackground(new java.awt.Color(65, 65, 65));
        noteProperties.setMinimumSize(new java.awt.Dimension(128, 103));
        noteProperties.setPreferredSize(new java.awt.Dimension(50, 96));
        noteProperties.setLayout(new javax.swing.BoxLayout(noteProperties, javax.swing.BoxLayout.Y_AXIS));

        frequencyProperty.setBackground(new java.awt.Color(65, 65, 65));
        frequencyProperty.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        frequencyProperty.setMinimumSize(new java.awt.Dimension(125, 32));
        frequencyProperty.setPreferredSize(new java.awt.Dimension(50, 32));
        frequencyProperty.setLayout(new java.awt.GridLayout(1, 2));

        frequencyLabel.setBackground(new java.awt.Color(65, 65, 65));
        frequencyLabel.setForeground(new java.awt.Color(255, 255, 255));
        frequencyLabel.setText("Fréquence :");
        frequencyLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        frequencyLabel.setOpaque(true);
        frequencyProperty.add(frequencyLabel);

        frequencySpinner.setModel(new javax.swing.SpinnerNumberModel(440.0d, 10.0d, 18000.0d, 0.1d));
        frequencySpinner.setEnabled(false);
        frequencySpinner.setMinimumSize(new java.awt.Dimension(30, 26));
        frequencyProperty.add(frequencySpinner);

        noteProperties.add(frequencyProperty);

        tuningProperty.setBackground(new java.awt.Color(65, 65, 65));
        tuningProperty.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        tuningProperty.setMinimumSize(new java.awt.Dimension(125, 32));
        tuningProperty.setPreferredSize(new java.awt.Dimension(50, 32));
        tuningProperty.setLayout(new java.awt.GridLayout(1, 2));

        tuningLabel.setBackground(new java.awt.Color(65, 65, 65));
        tuningLabel.setForeground(new java.awt.Color(255, 255, 255));
        tuningLabel.setText("Tuning : ");
        tuningLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        tuningLabel.setOpaque(true);
        tuningProperty.add(tuningLabel);

        tuningSpinner.setModel(new javax.swing.SpinnerNumberModel(0, -100, 100, 1));
        tuningSpinner.setMinimumSize(new java.awt.Dimension(30, 26));
        tuningSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tuningSpinnerStateChanged(evt);
            }
        });
        tuningProperty.add(tuningSpinner);

        noteProperties.add(tuningProperty);

        waveFormProperty.setBackground(new java.awt.Color(65, 65, 65));
        waveFormProperty.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        waveFormProperty.setMinimumSize(new java.awt.Dimension(125, 32));
        waveFormProperty.setPreferredSize(new java.awt.Dimension(50, 32));
        waveFormProperty.setLayout(new java.awt.GridLayout(1, 0));

        waveFormLabel.setBackground(new java.awt.Color(65, 65, 65));
        waveFormLabel.setForeground(new java.awt.Color(255, 255, 255));
        waveFormLabel.setText("Forme d'onde :");
        waveFormLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        waveFormLabel.setOpaque(true);
        waveFormProperty.add(waveFormLabel);

        waveformComboBox.setMinimumSize(new java.awt.Dimension(30, 26));
        waveformComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waveformComboBoxActionPerformed(evt);
            }
        });
        waveFormProperty.add(waveformComboBox);

        noteProperties.add(waveFormProperty);

        KeyProperties.add(noteProperties);

        audioClipProperties.setBackground(new java.awt.Color(65, 65, 65));
        audioClipProperties.setMinimumSize(new java.awt.Dimension(128, 30));
        audioClipProperties.setPreferredSize(new java.awt.Dimension(50, 70));
        audioClipProperties.setLayout(new javax.swing.BoxLayout(audioClipProperties, javax.swing.BoxLayout.Y_AXIS));

        audioClipFileProperty.setBackground(new java.awt.Color(65, 65, 65));
        audioClipFileProperty.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        audioClipFileProperty.setMinimumSize(new java.awt.Dimension(125, 32));
        audioClipFileProperty.setPreferredSize(new java.awt.Dimension(50, 32));
        audioClipFileProperty.setLayout(new java.awt.GridLayout(1, 2, 10, 0));

        audioClipFileLabel.setBackground(new java.awt.Color(65, 65, 65));
        audioClipFileLabel.setForeground(new java.awt.Color(255, 255, 255));
        audioClipFileLabel.setText("Fichier :");
        audioClipFileLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        audioClipFileLabel.setOpaque(true);
        audioClipFileProperty.add(audioClipFileLabel);

        audioClipPathLabel.setBackground(new java.awt.Color(65, 65, 65));
        audioClipPathLabel.setForeground(new java.awt.Color(255, 255, 255));
        audioClipPathLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        audioClipPathLabel.setText("Aucun fichier");
        audioClipPathLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        audioClipPathLabel.setOpaque(true);
        audioClipFileProperty.add(audioClipPathLabel);

        audioClipSelectButton.setBackground(new java.awt.Color(65, 65, 65));
        audioClipSelectButton.setForeground(new java.awt.Color(102, 102, 102));
        audioClipSelectButton.setLabel("Fichier...");
        audioClipSelectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                audioClipSelectButtonActionPerformed(evt);
            }
        });
        audioClipFileProperty.add(audioClipSelectButton);

        audioClipProperties.add(audioClipFileProperty);

        readSpeedProperty.setBackground(new java.awt.Color(65, 65, 65));
        readSpeedProperty.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        readSpeedProperty.setMinimumSize(new java.awt.Dimension(125, 32));
        readSpeedProperty.setPreferredSize(new java.awt.Dimension(50, 32));
        readSpeedProperty.setLayout(new java.awt.GridLayout(1, 2));

        readSpeedLabel.setBackground(new java.awt.Color(65, 65, 65));
        readSpeedLabel.setForeground(new java.awt.Color(255, 255, 255));
        readSpeedLabel.setText("Pitch : ");
        readSpeedLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        readSpeedLabel.setOpaque(true);
        readSpeedProperty.add(readSpeedLabel);

        readSpeedSpinner.setModel(new javax.swing.SpinnerNumberModel(1.0d, 0.05d, 100.0d, 0.05d));
        readSpeedSpinner.setMinimumSize(new java.awt.Dimension(30, 26));
        readSpeedSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                readSpeedSpinnerStateChanged(evt);
            }
        });
        readSpeedProperty.add(readSpeedSpinner);

        audioClipProperties.add(readSpeedProperty);

        KeyProperties.add(audioClipProperties);

        audioPanel.add(KeyProperties);

        tabbedPane.addTab("Audio", audioPanel);

        editPannel.setViewportView(tabbedPane);
        tabbedPane.getAccessibleContext().setAccessibleName("Forme");

        splitWindow.setRightComponent(editPannel);

        playPannel.setBackground(new java.awt.Color(65, 65, 65));
        playPannel.setBorder(null);
        playPannel.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        playPannel.setAutoscrolls(true);
        playPannel.setMinimumSize(new java.awt.Dimension(415, 200));
        playPannel.setPreferredSize(new java.awt.Dimension(415, 200));

        visualPanel4.setBackground(new java.awt.Color(65, 65, 65));
        visualPanel4.setMinimumSize(new java.awt.Dimension(600, 655));
        visualPanel4.setPreferredSize(new java.awt.Dimension(50, 200));
        visualPanel4.setLayout(new javax.swing.BoxLayout(visualPanel4, javax.swing.BoxLayout.LINE_AXIS));

        visualWrapper4.setBackground(new java.awt.Color(65, 65, 65));
        visualWrapper4.setLayout(new javax.swing.BoxLayout(visualWrapper4, javax.swing.BoxLayout.PAGE_AXIS));

        keyNameProperty8.setBackground(new java.awt.Color(65, 65, 65));
        keyNameProperty8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        keyNameProperty8.setMinimumSize(new java.awt.Dimension(125, 32));
        keyNameProperty8.setPreferredSize(new java.awt.Dimension(375, 0));
        keyNameProperty8.setLayout(new java.awt.GridLayout(1, 0));

        keyNameLabel8.setForeground(new java.awt.Color(255, 255, 255));
        keyNameLabel8.setText("BPM :");
        keyNameLabel8.setMinimumSize(new java.awt.Dimension(40, 16));
        keyNameLabel8.setPreferredSize(new java.awt.Dimension(0, 0));
        keyNameProperty8.add(keyNameLabel8);

        bpmSpinner.setModel(new javax.swing.SpinnerNumberModel(120, 1, 600, 1));
        bpmSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                bpmSpinnerStateChanged(evt);
            }
        });
        keyNameProperty8.add(bpmSpinner);

        visualWrapper4.add(keyNameProperty8);

        visualPanel4.add(visualWrapper4);

        playPannel.setViewportView(visualPanel4);

        splitWindow.setRightComponent(playPannel);

        songPannel.setBackground(new java.awt.Color(65, 65, 65));
        songPannel.setBorder(null);
        songPannel.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        songPannel.setAutoscrolls(true);
        songPannel.setMinimumSize(new java.awt.Dimension(415, 200));
        songPannel.setPreferredSize(new java.awt.Dimension(415, 200));
        splitWindow.setRightComponent(songPannel);

        globalEditPannel.setBackground(new java.awt.Color(65, 65, 65));
        globalEditPannel.setBorder(null);
        globalEditPannel.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        globalEditPannel.setAutoscrolls(true);
        globalEditPannel.setMinimumSize(new java.awt.Dimension(415, 200));
        globalEditPannel.setPreferredSize(new java.awt.Dimension(415, 200));

        visualPanel3.setBackground(new java.awt.Color(65, 65, 65));
        visualPanel3.setMinimumSize(new java.awt.Dimension(600, 655));
        visualPanel3.setPreferredSize(new java.awt.Dimension(50, 200));
        visualPanel3.setLayout(new javax.swing.BoxLayout(visualPanel3, javax.swing.BoxLayout.LINE_AXIS));

        visualWrapper3.setBackground(new java.awt.Color(65, 65, 65));
        visualWrapper3.setLayout(new javax.swing.BoxLayout(visualWrapper3, javax.swing.BoxLayout.PAGE_AXIS));

        informationWrapper3.setBackground(new java.awt.Color(65, 65, 65));
        informationWrapper3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        informationWrapper3.setPreferredSize(new java.awt.Dimension(50, 20));
        informationWrapper3.setLayout(new java.awt.GridLayout(1, 0));

        informationTitle3.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        informationTitle3.setForeground(new java.awt.Color(255, 255, 255));
        informationTitle3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        informationTitle3.setText("Instrument");
        informationTitle3.setToolTipText("");
        informationTitle3.setPreferredSize(new java.awt.Dimension(72, 20));
        informationWrapper3.add(informationTitle3);

        visualWrapper3.add(informationWrapper3);

        keyNameProperty3.setBackground(new java.awt.Color(65, 65, 65));
        keyNameProperty3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        keyNameProperty3.setMinimumSize(new java.awt.Dimension(125, 32));
        keyNameProperty3.setPreferredSize(new java.awt.Dimension(375, 0));
        keyNameProperty3.setLayout(new java.awt.GridLayout(1, 0));

        keyNameLabel3.setForeground(new java.awt.Color(255, 255, 255));
        keyNameLabel3.setText("Nom de l'instrument :");
        keyNameLabel3.setMinimumSize(new java.awt.Dimension(40, 16));
        keyNameLabel3.setPreferredSize(new java.awt.Dimension(0, 0));
        keyNameProperty3.add(keyNameLabel3);

        instrumentNameField.setBackground(new java.awt.Color(238, 238, 238));
        instrumentNameField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        instrumentNameField.setText("Nom de l'instrument");
        instrumentNameField.setBorder(null);
        instrumentNameField.setMinimumSize(new java.awt.Dimension(30, 26));
        instrumentNameField.setPreferredSize(new java.awt.Dimension(0, 0));
        instrumentNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                instrumentNameFieldKeyReleased(evt);
            }
        });
        keyNameProperty3.add(instrumentNameField);

        visualWrapper3.add(keyNameProperty3);

        keyNameProperty4.setBackground(new java.awt.Color(65, 65, 65));
        keyNameProperty4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        keyNameProperty4.setMinimumSize(new java.awt.Dimension(125, 32));
        keyNameProperty4.setPreferredSize(new java.awt.Dimension(375, 0));
        keyNameProperty4.setLayout(new java.awt.GridLayout(1, 0));

        keyNameLabel4.setForeground(new java.awt.Color(255, 255, 255));
        keyNameLabel4.setText("Timbre de base :");
        keyNameLabel4.setMinimumSize(new java.awt.Dimension(40, 16));
        keyNameLabel4.setPreferredSize(new java.awt.Dimension(0, 0));
        keyNameProperty4.add(keyNameLabel4);

        masterWaveformComboBox.setMinimumSize(new java.awt.Dimension(30, 26));
        masterWaveformComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                masterWaveformComboBoxActionPerformed(evt);
            }
        });
        keyNameProperty4.add(masterWaveformComboBox);

        visualWrapper3.add(keyNameProperty4);

        visualPanel3.add(visualWrapper3);

        globalEditPannel.setViewportView(visualPanel3);

        splitWindow.setRightComponent(globalEditPannel);

        insertPannel.setBackground(new java.awt.Color(65, 65, 65));
        insertPannel.setBorder(null);
        insertPannel.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        insertPannel.setAutoscrolls(true);
        insertPannel.setMinimumSize(new java.awt.Dimension(415, 200));
        insertPannel.setPreferredSize(new java.awt.Dimension(415, 200));

        visualPanel5.setBackground(new java.awt.Color(65, 65, 65));
        visualPanel5.setMinimumSize(new java.awt.Dimension(600, 655));
        visualPanel5.setPreferredSize(new java.awt.Dimension(50, 200));
        visualPanel5.setLayout(new javax.swing.BoxLayout(visualPanel5, javax.swing.BoxLayout.LINE_AXIS));

        visualWrapper5.setBackground(new java.awt.Color(65, 65, 65));
        visualWrapper5.setLayout(new javax.swing.BoxLayout(visualWrapper5, javax.swing.BoxLayout.PAGE_AXIS));

        informationWrapper4.setBackground(new java.awt.Color(65, 65, 65));
        informationWrapper4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65), 4));
        informationWrapper4.setPreferredSize(new java.awt.Dimension(50, 20));
        informationWrapper4.setLayout(new java.awt.GridLayout());

        informationTitle4.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        informationTitle4.setForeground(new java.awt.Color(255, 255, 255));
        informationTitle4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        informationTitle4.setText("Insérer");
        informationTitle4.setToolTipText("");
        informationTitle4.setPreferredSize(new java.awt.Dimension(72, 20));
        informationWrapper4.add(informationTitle4);

        visualWrapper5.add(informationWrapper4);

        visualPanel5.add(visualWrapper5);

        insertPannel.setViewportView(visualPanel5);

        splitWindow.setRightComponent(insertPannel);

        getContentPane().add(splitWindow, java.awt.BorderLayout.CENTER);

        jToolBar1.setBackground(new java.awt.Color(51, 51, 51));
        jToolBar1.setBorder(null);
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.add(filler16);

        buttonPlayMode.setBackground(new java.awt.Color(65, 65, 65));
        buttonPlayMode.setForeground(new java.awt.Color(0, 0, 255));
        buttonPlayMode.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnPlay_selected.png"))); // NOI18N
        buttonPlayMode.setToolTipText("Mode Jeu Libre");
        buttonPlayMode.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));
        buttonPlayMode.setBorderPainted(false);
        buttonPlayMode.setContentAreaFilled(false);
        buttonPlayMode.setFocusable(false);
        buttonPlayMode.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonPlayMode.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonPlayMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPlayModeActionPerformed(evt);
            }
        });
        jToolBar1.add(buttonPlayMode);

        buttonEditKey.setBackground(new java.awt.Color(65, 65, 65));
        buttonEditKey.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnEdit.png"))); // NOI18N
        buttonEditKey.setToolTipText("Mode Édition");
        buttonEditKey.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));
        buttonEditKey.setBorderPainted(false);
        buttonEditKey.setContentAreaFilled(false);
        buttonEditKey.setFocusable(false);
        buttonEditKey.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonEditKey.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonEditKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditKeyActionPerformed(evt);
            }
        });
        jToolBar1.add(buttonEditKey);

        buttonAutoPlay.setBackground(new java.awt.Color(65, 65, 65));
        buttonAutoPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnAutoPlay.png"))); // NOI18N
        buttonAutoPlay.setToolTipText("Mode Lecture");
        buttonAutoPlay.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));
        buttonAutoPlay.setBorderPainted(false);
        buttonAutoPlay.setContentAreaFilled(false);
        buttonAutoPlay.setFocusable(false);
        buttonAutoPlay.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonAutoPlay.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonAutoPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAutoPlayActionPerformed(evt);
            }
        });
        jToolBar1.add(buttonAutoPlay);

        buttonInsert.setBackground(new java.awt.Color(65, 65, 65));
        buttonInsert.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnInsert.png"))); // NOI18N
        buttonInsert.setToolTipText("Mode Insertion");
        buttonInsert.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));
        buttonInsert.setBorderPainted(false);
        buttonInsert.setContentAreaFilled(false);
        buttonInsert.setFocusable(false);
        buttonInsert.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonInsert.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonInsertActionPerformed(evt);
            }
        });
        jToolBar1.add(buttonInsert);
        jToolBar1.add(filler7);

        playTools.setBackground(new java.awt.Color(51, 51, 51));
        playTools.setLayout(new javax.swing.BoxLayout(playTools, javax.swing.BoxLayout.LINE_AXIS));

        metronomeButton.setBackground(new java.awt.Color(65, 65, 65));
        metronomeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/metronome_off.png"))); // NOI18N
        metronomeButton.setToolTipText("Métronome");
        metronomeButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));
        metronomeButton.setBorderPainted(false);
        metronomeButton.setContentAreaFilled(false);
        metronomeButton.setFocusable(false);
        metronomeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        metronomeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        metronomeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metronomeButtonActionPerformed(evt);
            }
        });
        playTools.add(metronomeButton);

        jToolBar1.add(playTools);

        autoPlayTools.setBackground(new java.awt.Color(51, 51, 51));
        autoPlayTools.setLayout(new javax.swing.BoxLayout(autoPlayTools, javax.swing.BoxLayout.LINE_AXIS));

        togglePlayButton.setBackground(new java.awt.Color(65, 65, 65));
        togglePlayButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnPlaySong.png"))); // NOI18N
        togglePlayButton.setToolTipText("Play / Pause");
        togglePlayButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));
        togglePlayButton.setBorderPainted(false);
        togglePlayButton.setContentAreaFilled(false);
        togglePlayButton.setFocusable(false);
        togglePlayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                togglePlayButtonActionPerformed(evt);
            }
        });
        autoPlayTools.add(togglePlayButton);

        stopButton.setBackground(new java.awt.Color(65, 65, 65));
        stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnStop.png"))); // NOI18N
        stopButton.setToolTipText("Stop");
        stopButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));
        stopButton.setBorderPainted(false);
        stopButton.setContentAreaFilled(false);
        stopButton.setFocusable(false);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });
        autoPlayTools.add(stopButton);

        muteButton.setBackground(new java.awt.Color(65, 65, 65));
        muteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/mute_off.png"))); // NOI18N
        muteButton.setToolTipText("Sourdine");
        muteButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));
        muteButton.setBorderPainted(false);
        muteButton.setContentAreaFilled(false);
        muteButton.setFocusable(false);
        muteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                muteButtonActionPerformed(evt);
            }
        });
        autoPlayTools.add(muteButton);

        jToolBar1.add(autoPlayTools);

        selectedKeyTools.setOpaque(false);
        selectedKeyTools.setLayout(new javax.swing.BoxLayout(selectedKeyTools, javax.swing.BoxLayout.LINE_AXIS));

        addPointButton.setBackground(new java.awt.Color(65, 65, 65));
        addPointButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnAddNote.png"))); // NOI18N
        addPointButton.setToolTipText("Ajouter un coin");
        addPointButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));
        addPointButton.setBorderPainted(false);
        addPointButton.setContentAreaFilled(false);
        addPointButton.setFocusable(false);
        addPointButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPointButtonActionPerformed(evt);
            }
        });
        selectedKeyTools.add(addPointButton);

        buttonDuplicate.setBackground(new java.awt.Color(65, 65, 65));
        buttonDuplicate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnDuplicate.png"))); // NOI18N
        buttonDuplicate.setToolTipText("Dupliquer la touche");
        buttonDuplicate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));
        buttonDuplicate.setBorderPainted(false);
        buttonDuplicate.setContentAreaFilled(false);
        buttonDuplicate.setFocusable(false);
        buttonDuplicate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonDuplicate.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonDuplicate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDuplicateActionPerformed(evt);
            }
        });
        selectedKeyTools.add(buttonDuplicate);

        buttonMidi.setBackground(new java.awt.Color(65, 65, 65));
        buttonMidi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/midi_detected.png"))); // NOI18N
        buttonMidi.setToolTipText("Associer la touche");
        buttonMidi.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));
        buttonMidi.setBorderPainted(false);
        buttonMidi.setContentAreaFilled(false);
        buttonMidi.setFocusable(false);
        buttonMidi.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonMidi.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonMidi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMidiActionPerformed(evt);
            }
        });
        selectedKeyTools.add(buttonMidi);

        buttonAddImage.setBackground(new java.awt.Color(65, 65, 65));
        buttonAddImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnAddImage.png"))); // NOI18N
        buttonAddImage.setToolTipText("Ajouter une image");
        buttonAddImage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));
        buttonAddImage.setBorderPainted(false);
        buttonAddImage.setContentAreaFilled(false);
        buttonAddImage.setFocusable(false);
        buttonAddImage.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonAddImage.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonAddImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddImageActionPerformed(evt);
            }
        });
        selectedKeyTools.add(buttonAddImage);

        buttonRemoveImage.setBackground(new java.awt.Color(65, 65, 65));
        buttonRemoveImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnDeleteImage.png"))); // NOI18N
        buttonRemoveImage.setToolTipText("Supprimer l'image");
        buttonRemoveImage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));
        buttonRemoveImage.setBorderPainted(false);
        buttonRemoveImage.setContentAreaFilled(false);
        buttonRemoveImage.setFocusable(false);
        buttonRemoveImage.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonRemoveImage.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonRemoveImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoveImageActionPerformed(evt);
            }
        });
        selectedKeyTools.add(buttonRemoveImage);

        buttonAddSunkenImage.setBackground(new java.awt.Color(65, 65, 65));
        buttonAddSunkenImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnAddSunkenImage.png"))); // NOI18N
        buttonAddSunkenImage.setToolTipText("Ajouter une image pour l'état enfoncée");
        buttonAddSunkenImage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));
        buttonAddSunkenImage.setBorderPainted(false);
        buttonAddSunkenImage.setContentAreaFilled(false);
        buttonAddSunkenImage.setFocusable(false);
        buttonAddSunkenImage.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonAddSunkenImage.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonAddSunkenImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddSunkenImageActionPerformed(evt);
            }
        });
        selectedKeyTools.add(buttonAddSunkenImage);

        buttonRemoveSunkenImage.setBackground(new java.awt.Color(65, 65, 65));
        buttonRemoveSunkenImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnDeleteSunkenImage.png"))); // NOI18N
        buttonRemoveSunkenImage.setToolTipText("Supprimer l'image pour l'état enfoncée");
        buttonRemoveSunkenImage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));
        buttonRemoveSunkenImage.setBorderPainted(false);
        buttonRemoveSunkenImage.setContentAreaFilled(false);
        buttonRemoveSunkenImage.setFocusable(false);
        buttonRemoveSunkenImage.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonRemoveSunkenImage.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonRemoveSunkenImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoveSunkenImageActionPerformed(evt);
            }
        });
        selectedKeyTools.add(buttonRemoveSunkenImage);

        buttonDelete.setBackground(new java.awt.Color(65, 65, 65));
        buttonDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnDelete.png"))); // NOI18N
        buttonDelete.setToolTipText("Supprimer la touche");
        buttonDelete.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));
        buttonDelete.setBorderPainted(false);
        buttonDelete.setContentAreaFilled(false);
        buttonDelete.setFocusable(false);
        buttonDelete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonDelete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });
        selectedKeyTools.add(buttonDelete);

        jToolBar1.add(selectedKeyTools);
        jToolBar1.add(filler9);

        instrumentNameTextField.setBackground(new java.awt.Color(51, 51, 51));
        instrumentNameTextField.setFont(new java.awt.Font("Lucida Grande", 1, 16)); // NOI18N
        instrumentNameTextField.setForeground(new java.awt.Color(255, 255, 255));
        instrumentNameTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        instrumentNameTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51), 7));
        instrumentNameTextField.setEnabled(false);
        instrumentNameTextField.setPreferredSize(new java.awt.Dimension(10, 16));
        jToolBar1.add(instrumentNameTextField);

        searchTextField.setBackground(new java.awt.Color(102, 102, 102));
        searchTextField.setForeground(new java.awt.Color(153, 153, 153));
        searchTextField.setText("Rechercher");
        searchTextField.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51), 7), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 5)));
        searchTextField.setMinimumSize(new java.awt.Dimension(0, 10));
        searchTextField.setPreferredSize(new java.awt.Dimension(69, 10));
        searchTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchTextFieldFocusLost(evt);
            }
        });
        searchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchTextFieldKeyReleased(evt);
            }
        });
        jToolBar1.add(searchTextField);
        jToolBar1.add(filler17);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        fileMenuItem.setBorder(null);
        fileMenuItem.setText("Fichier");

        newMenu.setBorder(null);
        newMenu.setText("Nouveau");

        newBlankMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newBlankMenuItem.setText("Vide");
        newBlankMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBlankMenuItemActionPerformed(evt);
            }
        });
        newMenu.add(newBlankMenuItem);

        newGuitarMenuItem.setText("Guitare");
        newGuitarMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGuitarMenuItemActionPerformed(evt);
            }
        });
        newMenu.add(newGuitarMenuItem);

        newPianoMenuItem.setText("Piano");
        newPianoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPianoMenuItemActionPerformed(evt);
            }
        });
        newMenu.add(newPianoMenuItem);

        fileMenuItem.add(newMenu);

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setText("Ouvrir");
        openMenuItem.setBorder(null);
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenuItem.add(openMenuItem);

        openSongMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        openSongMenuItem.setText("Ouvrir chanson");
        openSongMenuItem.setBorder(null);
        openSongMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openSongMenuItemActionPerformed(evt);
            }
        });
        fileMenuItem.add(openSongMenuItem);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setText("Enregistrer");
        saveMenuItem.setBorder(null);
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenuItem.add(saveMenuItem);

        saveAsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        saveAsMenuItem.setText("Enregistrer sous");
        saveAsMenuItem.setBorder(null);
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenuItem.add(saveAsMenuItem);
        fileMenuItem.add(jSeparator3);

        refreshMidi.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        refreshMidi.setText("Rafraichir MIDI");
        refreshMidi.setBorder(null);
        refreshMidi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshMidiActionPerformed(evt);
            }
        });
        fileMenuItem.add(refreshMidi);
        fileMenuItem.add(jSeparator2);

        quitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        quitMenuItem.setText("Quitter");
        quitMenuItem.setBorder(null);
        quitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitMenuItemActionPerformed(evt);
            }
        });
        fileMenuItem.add(quitMenuItem);

        jMenuBar1.add(fileMenuItem);

        jMenu2.setText("Edition");

        menuEditNext.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_PERIOD, 0));
        menuEditNext.setText("Suivant");
        menuEditNext.setEnabled(false);
        menuEditNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditNextActionPerformed(evt);
            }
        });
        jMenu2.add(menuEditNext);

        menuEditPrevious.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_COMMA, 0));
        menuEditPrevious.setText("Précédent");
        menuEditPrevious.setEnabled(false);
        menuEditPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditPreviousActionPerformed(evt);
            }
        });
        jMenu2.add(menuEditPrevious);
        jMenu2.add(jSeparator1);

        menuEditDelete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        menuEditDelete.setText("Supprimer");
        menuEditDelete.setEnabled(false);
        menuEditDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditDeleteActionPerformed(evt);
            }
        });
        jMenu2.add(menuEditDelete);

        menuEditDuplicate.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        menuEditDuplicate.setText("Dupliquer");
        menuEditDuplicate.setEnabled(false);
        menuEditDuplicate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditDuplicateActionPerformed(evt);
            }
        });
        jMenu2.add(menuEditDuplicate);

        jMenuBar1.add(jMenu2);

        insertMenuItem.setBorder(null);
        insertMenuItem.setText("Insérer");

        createRectangleMenuItem.setText("Rectangle");
        createRectangleMenuItem.setBorder(null);
        createRectangleMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createRectangleMenuItemActionPerformed(evt);
            }
        });
        insertMenuItem.add(createRectangleMenuItem);

        createTriangleMenuItem.setText("Triangle");
        createTriangleMenuItem.setBorder(null);
        createTriangleMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createTriangleMenuItemActionPerformed(evt);
            }
        });
        insertMenuItem.add(createTriangleMenuItem);

        jMenuBar1.add(insertMenuItem);

        jMenu1.setText("Mode");

        menuModePlay.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, java.awt.event.InputEvent.CTRL_MASK));
        menuModePlay.setText("Jouer");
        menuModePlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuModePlayActionPerformed(evt);
            }
        });
        jMenu1.add(menuModePlay);

        menuModeEditKey.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.CTRL_MASK));
        menuModeEditKey.setText("Modifier l'instrument");
        menuModeEditKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuModeEditKeyActionPerformed(evt);
            }
        });
        jMenu1.add(menuModeEditKey);

        menuModeAutoPlay.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_3, java.awt.event.InputEvent.CTRL_MASK));
        menuModeAutoPlay.setText("Lecture");
        menuModeAutoPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuModeAutoPlayActionPerformed(evt);
            }
        });
        jMenu1.add(menuModeAutoPlay);

        menuModeInsert.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_4, java.awt.event.InputEvent.CTRL_MASK));
        menuModeInsert.setText("Insertion");
        menuModeInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuModeInsertActionPerformed(evt);
            }
        });
        jMenu1.add(menuModeInsert);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newBlankMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBlankMenuItemActionPerformed
        GaudrophoneController.getController().getInstrumentManager().newInstrument();
        this.instrumentNameTextField.setText(GaudrophoneController.getController().getInstrumentManager().getName());
        this.instrumentNameField.setText(GaudrophoneController.getController().getInstrumentManager().getName());
        GaudrophoneController.getController().getCanvasManager().setState(State.Play);
        this.refresh();
    }//GEN-LAST:event_newBlankMenuItemActionPerformed

    private void newGuitarMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGuitarMenuItemActionPerformed
        GaudrophoneController.getController().getInstrumentManager().newInstrument(new Guitar());
        this.instrumentNameTextField.setText(GaudrophoneController.getController().getInstrumentManager().getName());
        this.instrumentNameField.setText(GaudrophoneController.getController().getInstrumentManager().getName());
        GaudrophoneController.getController().getCanvasManager().setState(State.Play);
        GaudrophoneController.getController().getCanvasManager().findNewRatio(new Vector2(this.canvas.getWidth(), this.canvas.getHeight()));
        this.refresh();
    }//GEN-LAST:event_newGuitarMenuItemActionPerformed

    private void quitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_quitMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        fileDialog.setDialogTitle("Sélectionner un fichier");
        FileFilter filter = new FileNameExtensionFilter("Fichier Gaudrophone","gaud");
        fileDialog.resetChoosableFileFilters();
        fileDialog.setFileFilter(filter);
        fileDialog.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        if (fileDialog.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            if (GaudrophoneController.getController().getInstrumentManager().openInstrument(fileDialog.getSelectedFile().getAbsolutePath())) {
                this.instrumentNameTextField.setText(GaudrophoneController.getController().getInstrumentManager().getName());
                this.instrumentNameField.setText(GaudrophoneController.getController().getInstrumentManager().getName());
                this.refresh();
            } else {
                javax.swing.JOptionPane.showMessageDialog(null, "Impossible d'ouvrir cet instrument");
            }
        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        if (!GaudrophoneController.getController().getInstrumentManager().saveInstrument()) {
            saveInstrument();
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        saveInstrument();
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void createRectangleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createRectangleMenuItemActionPerformed
        GaudrophoneController.getController().getCanvasManager().setState(State.CreatingShape);
        GaudrophoneController.getController().getCanvasManager().setStoredKeyGenerator(new RectangleKeyShape());
    }//GEN-LAST:event_createRectangleMenuItemActionPerformed

    private void createTriangleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createTriangleMenuItemActionPerformed
        GaudrophoneController.getController().getCanvasManager().setState(State.CreatingShape);
        GaudrophoneController.getController().getCanvasManager().setStoredKeyGenerator(new TriangleKeyShape());
    }//GEN-LAST:event_createTriangleMenuItemActionPerformed

    private void buttonPlayModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPlayModeActionPerformed
        GaudrophoneController.getController().getCanvasManager().setState(State.Play);
    }//GEN-LAST:event_buttonPlayModeActionPerformed

    private void buttonEditKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditKeyActionPerformed
        GaudrophoneController.getController().getCanvasManager().setState(State.EditKey);
    }//GEN-LAST:event_buttonEditKeyActionPerformed

    private void keyNameFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keyNameFieldKeyReleased
        GaudrophoneController.getController().setName(keyNameField.getText());
    }//GEN-LAST:event_keyNameFieldKeyReleased

    private void attackSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_attackSpinnerStateChanged
        GaudrophoneController.getController().setAttack((double)attackSlider.getValue());
        ((EnvelopeGraph)this.envelopeGraph).setAttack((double)attackSlider.getValue());
        this.envelopeGraph.repaint();
    }//GEN-LAST:event_attackSpinnerStateChanged

    private void decaySpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_decaySpinnerStateChanged
        GaudrophoneController.getController().setDecay((double)decaySlider.getValue());
        ((EnvelopeGraph)this.envelopeGraph).setDecay((double)decaySlider.getValue());
        this.envelopeGraph.repaint();
    }//GEN-LAST:event_decaySpinnerStateChanged

    private void sustainSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sustainSpinnerStateChanged
        GaudrophoneController.getController().setSustain((double)sustainSlider.getValue());
        ((EnvelopeGraph)this.envelopeGraph).setSustain(((double)sustainSlider.getValue())/(double)sustainSlider.getMaximum());
        this.envelopeGraph.repaint();
    }//GEN-LAST:event_sustainSpinnerStateChanged

    private void releaseSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_releaseSpinnerStateChanged
        GaudrophoneController.getController().setRelease((double)releaseSlider.getValue());
        ((EnvelopeGraph)this.envelopeGraph).setRelease((double)releaseSlider.getValue());
        this.envelopeGraph.repaint();
    }//GEN-LAST:event_releaseSpinnerStateChanged

    private void synthRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_synthRadioButtonItemStateChanged
        this.noteProperties.setVisible(evt.getStateChange() == ItemEvent.SELECTED);
        this.audioClipProperties.setVisible(evt.getStateChange() == ItemEvent.DESELECTED);
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            GaudrophoneController.getController().createSynth();
        } else {
            GaudrophoneController.getController().createAudioClip();
            this.audioClipPathLabel.setText("Aucun fichier");
        }
    }//GEN-LAST:event_synthRadioButtonItemStateChanged

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
        GaudrophoneController.getController().deleteKey();
    }//GEN-LAST:event_buttonDeleteActionPerformed

    private void buttonDuplicateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDuplicateActionPerformed
        GaudrophoneController.getController().duplicateKey();
    }//GEN-LAST:event_buttonDuplicateActionPerformed

    private void volumeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_volumeSliderStateChanged
        GaudrophoneController.getController().setVolume((double)volumeSlider.getValue()/(double)volumeSlider.getMaximum());
        ((EnvelopeGraph)this.envelopeGraph).setVolume((double)volumeSlider.getValue()/(double)volumeSlider.getMaximum());
        this.envelopeGraph.repaint();
    }//GEN-LAST:event_volumeSliderStateChanged

    private void displayNameCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_displayNameCheckBoxItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED) {
            GaudrophoneController.getController().getSelectionManager().getSelectedKey().addState(KeyState.displayName);
            canvas.repaint();
        } else if(evt.getStateChange() == ItemEvent.DESELECTED) {
            GaudrophoneController.getController().getSelectionManager().getSelectedKey().removeState(KeyState.displayName);
            canvas.repaint();
        }
    }//GEN-LAST:event_displayNameCheckBoxItemStateChanged

    private void displayNoteCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_displayNoteCheckBoxItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED) {
            GaudrophoneController.getController().getSelectionManager().getSelectedKey().addState(KeyState.displayNote);
            canvas.repaint();
        } else if(evt.getStateChange() == ItemEvent.DESELECTED) {
            GaudrophoneController.getController().getSelectionManager().getSelectedKey().removeState(KeyState.displayNote);
            canvas.repaint();
        }
    }//GEN-LAST:event_displayNoteCheckBoxItemStateChanged

    private void displayOctaveCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_displayOctaveCheckBoxItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED) {
            GaudrophoneController.getController().getSelectionManager().getSelectedKey().addState(KeyState.displayOctave);
            canvas.repaint();
        } else if(evt.getStateChange() == ItemEvent.DESELECTED) {
            GaudrophoneController.getController().getSelectionManager().getSelectedKey().removeState(KeyState.displayOctave);
            canvas.repaint();
        }
    }//GEN-LAST:event_displayOctaveCheckBoxItemStateChanged

    private void displayAlterationCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_displayAlterationCheckBoxItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED) {
            GaudrophoneController.getController().getSelectionManager().getSelectedKey().addState(KeyState.displayAlteration);
            canvas.repaint();
        } else if(evt.getStateChange() == ItemEvent.DESELECTED) {
            GaudrophoneController.getController().getSelectionManager().getSelectedKey().removeState(KeyState.displayAlteration);
            canvas.repaint();
        }
    }//GEN-LAST:event_displayAlterationCheckBoxItemStateChanged
    
    
    private void buttonRemoveImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoveImageActionPerformed
        GaudrophoneController.getController().setKeyImage(null);
        this.buttonRemoveImage.setVisible(false);
        this.buttonAddImage.setVisible(true);
    }//GEN-LAST:event_buttonRemoveImageActionPerformed
    
    private void buttonRemoveSunkenImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoveSunkenImageActionPerformed
        GaudrophoneController.getController().setKeySunkenImage(null);
        this.buttonRemoveSunkenImage.setVisible(false);
        this.buttonAddSunkenImage.setVisible(true);
    }//GEN-LAST:event_buttonRemoveSunkenImageActionPerformed

    private void buttonAddImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddImageActionPerformed
        fileDialog.setDialogTitle("Sélectionner une image");
        fileDialog.resetChoosableFileFilters();
        fileDialog.addChoosableFileFilter(new FileNameExtensionFilter("Fichier JPEG","jpg"));
        fileDialog.addChoosableFileFilter(new FileNameExtensionFilter("Fichier PNG","png"));
        fileDialog.addChoosableFileFilter(new FileNameExtensionFilter("Fichier GIF","gif"));
        fileDialog.addChoosableFileFilter(new FileNameExtensionFilter("Fichier Bitmap","bmp"));
        fileDialog.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        if (fileDialog.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            GaudrophoneController.getController().setKeyImage(fileDialog.getSelectedFile().getAbsolutePath());
            this.buttonRemoveImage.setVisible(true);
            this.buttonAddImage.setVisible(false);
        }
    }//GEN-LAST:event_buttonAddImageActionPerformed

    private void buttonAddSunkenImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddSunkenImageActionPerformed
        fileDialog.setDialogTitle("Sélectionner une image");
        fileDialog.resetChoosableFileFilters();
        fileDialog.addChoosableFileFilter(new FileNameExtensionFilter("Fichier JPEG","jpg"));
        fileDialog.addChoosableFileFilter(new FileNameExtensionFilter("Fichier PNG","png"));
        fileDialog.addChoosableFileFilter(new FileNameExtensionFilter("Fichier GIF","gif"));
        fileDialog.addChoosableFileFilter(new FileNameExtensionFilter("Fichier Bitmap","bmp"));
        fileDialog.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        if (fileDialog.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            GaudrophoneController.getController().setKeySunkenImage(fileDialog.getSelectedFile().getAbsolutePath());
            this.buttonRemoveSunkenImage.setVisible(true);
            this.buttonAddSunkenImage.setVisible(false);
        }
    }//GEN-LAST:event_buttonAddSunkenImageActionPerformed

    private void backgroundDisplayLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backgroundDisplayLabelMouseClicked
        Color color = JColorChooser.showDialog(this, "Choisir une couleur", backgroundDisplayLabel.getBackground());
        if (color != null) {
            GaudrophoneController.getController().setKeyColor(color);
            this.backgroundDisplayLabel.setBackground(color);
        }
    }//GEN-LAST:event_backgroundDisplayLabelMouseClicked

    private void backgroundSunkenDisplayLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backgroundSunkenDisplayLabelMouseClicked
        Color color = JColorChooser.showDialog(this, "Choisir une couleur", backgroundSunkenDisplayLabel.getBackground());
        if (color != null) {
            GaudrophoneController.getController().setKeySunkenColor(color);
            this.backgroundSunkenDisplayLabel.setBackground(color);
        }
    }//GEN-LAST:event_backgroundSunkenDisplayLabelMouseClicked

    private void octaveSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_octaveSpinnerStateChanged
        GaudrophoneController.getController().setOctave((int)this.octaveSpinner.getValue());
    }//GEN-LAST:event_octaveSpinnerStateChanged

    private void flatRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flatRadioButtonActionPerformed
        GaudrophoneController.getController().setAlteration(Alteration.Flat);
    }//GEN-LAST:event_flatRadioButtonActionPerformed

    private void naturalRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_naturalRadioButtonActionPerformed
        GaudrophoneController.getController().setAlteration(Alteration.Natural);
    }//GEN-LAST:event_naturalRadioButtonActionPerformed

    private void sharpRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sharpRadioButtonActionPerformed
        GaudrophoneController.getController().setAlteration(Alteration.Sharp);
    }//GEN-LAST:event_sharpRadioButtonActionPerformed

    private void tuningSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tuningSpinnerStateChanged
        GaudrophoneController.getController().setTuning((int)this.tuningSpinner.getValue());
    }//GEN-LAST:event_tuningSpinnerStateChanged

    private void textColorDisplayLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textColorDisplayLabelMouseClicked
        Color color = JColorChooser.showDialog(this, "Choisir une couleur", textColorDisplayLabel.getBackground());
        if (color != null) {
            GaudrophoneController.getController().setKeyTextColor(color);
            this.textColorDisplayLabel.setBackground(color);
        }
    }//GEN-LAST:event_textColorDisplayLabelMouseClicked

    private void textSunkenColorDisplayLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textSunkenColorDisplayLabelMouseClicked
        Color color = JColorChooser.showDialog(this, "Choisir une couleur", textSunkenColorDisplayLabel.getBackground());
        if (color != null) {
            GaudrophoneController.getController().setKeySunkenTextColor(color);
            this.textSunkenColorDisplayLabel.setBackground(color);
        }
    }//GEN-LAST:event_textSunkenColorDisplayLabelMouseClicked

    private void xSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_xSpinnerStateChanged
        GaudrophoneController.getController().setKeyPosition(new Vector2((double)this.xSpinner.getValue(), (double)this.ySpinner.getValue()));
        this.refresh();
    }//GEN-LAST:event_xSpinnerStateChanged

    private void ySpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ySpinnerStateChanged
        GaudrophoneController.getController().setKeyPosition(new Vector2((double)this.xSpinner.getValue(), (double)this.ySpinner.getValue()));
        this.refresh();
    }//GEN-LAST:event_ySpinnerStateChanged

    private void widthSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_widthSpinnerStateChanged
        GaudrophoneController.getController().setKeySize(new Vector2((double)this.widthSpinner.getValue(), (double)this.heightSpinner.getValue()));
        this.refresh();
    }//GEN-LAST:event_widthSpinnerStateChanged

    private void zSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_zSpinnerStateChanged
        GaudrophoneController.getController().setKeyDepth((int)this.zSpinner.getValue());
        this.refresh();
    }//GEN-LAST:event_zSpinnerStateChanged

    private void heightSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_heightSpinnerStateChanged
        GaudrophoneController.getController().setKeySize(new Vector2((double)this.widthSpinner.getValue(), (double)this.heightSpinner.getValue()));
        this.refresh();
    }//GEN-LAST:event_heightSpinnerStateChanged

    private void readSpeedSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_readSpeedSpinnerStateChanged
        GaudrophoneController.getController().setPitch((double)this.readSpeedSpinner.getValue());
    }//GEN-LAST:event_readSpeedSpinnerStateChanged

    private void audioClipSelectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_audioClipSelectButtonActionPerformed
        fileDialog.setDialogTitle("Sélectionner un fichier");
        fileDialog.resetChoosableFileFilters();
        fileDialog.addChoosableFileFilter(new FileNameExtensionFilter("Fichier WAV","wav"));
        fileDialog.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        if (fileDialog.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            if (GaudrophoneController.getController().setAudioClip(fileDialog.getSelectedFile().getAbsolutePath())) {
                this.audioClipPathLabel.setText(fileDialog.getSelectedFile().getName());
            } else {
                javax.swing.JOptionPane.showMessageDialog(null, "Impossible d'ouvrir ce fichier");
            }
        }
    }//GEN-LAST:event_audioClipSelectButtonActionPerformed

    private void lineColorEditButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lineColorEditButtonMouseClicked
        Color color = JColorChooser.showDialog(this, "Choisir une couleur", backgroundDisplayLabel.getBackground());
        if (color != null) {
            if(GaudrophoneController.getController().getSelectionManager().getSelectedLine() == -5)
                GaudrophoneController.getController().setAllLineColor(color);
            else
                GaudrophoneController.getController().setLineColor(color);
            this.lineColorEditButton.setBackground(color);
        }
    }//GEN-LAST:event_lineColorEditButtonMouseClicked

        
    private void searchTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchTextFieldFocusGained
        this.searchTextField.setText("");
        this.searchTextField.setForeground(Color.white);
        this.canvas.shapeDrawer.setIsSearching(true);
        this.refresh();
    }//GEN-LAST:event_searchTextFieldFocusGained
    
    private void searchTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchTextFieldFocusLost
        this.searchTextField.setText("Rechercher");
        this.searchTextField.setForeground(new Color(153, 153, 153));
        GaudrophoneController.getController().search(null);
        this.canvas.shapeDrawer.setIsSearching(false);
        this.refresh();
    }//GEN-LAST:event_searchTextFieldFocusLost
    
    private void borderComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borderComboBoxActionPerformed
        int index = this.borderComboBox.getSelectedIndex();
        int count = this.borderComboBox.getItemCount();
        int lineIndex = 0;
        if(index == 0) {
            this.lineThicknessSpinner.setValue(2d);
            this.lineColorEditButton.setBackground(new Color(65, 65, 65));
            this.lineControlWrapper.setVisible(true);
            lineIndex = -5;
        }
        else if(index == count - 4) {
            lineIndex = -1;
        }
        else if(index == count - 3) {
            lineIndex = -2;
        }
        else if(index == count - 2) {
            lineIndex = -3;
        }
        else if(index == count - 1) {
            lineIndex = -4;
        }
        else if(index != -1) {
            lineIndex = index - 1;
        }
        
        GaudrophoneController.getController().getSelectionManager().setLine(lineIndex);
        this.refresh();
    }//GEN-LAST:event_borderComboBoxActionPerformed

    private void lineThicknessSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_lineThicknessSpinnerStateChanged
        if((double)this.lineThicknessSpinner.getValue() >= 0 ) {
            GaudrophoneController.getController().setLineThickness((double)this.lineThicknessSpinner.getValue());
            this.refresh();
        }
    }//GEN-LAST:event_lineThicknessSpinnerStateChanged

    private void menuModeEditKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuModeEditKeyActionPerformed
        GaudrophoneController.getController().getCanvasManager().setState(State.EditKey);
    }//GEN-LAST:event_menuModeEditKeyActionPerformed

    private void menuModePlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuModePlayActionPerformed
        GaudrophoneController.getController().getCanvasManager().setState(State.Play);
    }//GEN-LAST:event_menuModePlayActionPerformed

    private void menuEditDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditDeleteActionPerformed
        GaudrophoneController.getController().deleteKey();
    }//GEN-LAST:event_menuEditDeleteActionPerformed

    private void menuEditDuplicateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditDuplicateActionPerformed
        GaudrophoneController.getController().duplicateKey();
    }//GEN-LAST:event_menuEditDuplicateActionPerformed

    private void newPianoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPianoMenuItemActionPerformed
        GaudrophoneController.getController().getInstrumentManager().newInstrument(new Piano());
        this.instrumentNameTextField.setText(GaudrophoneController.getController().getInstrumentManager().getName());
        this.instrumentNameField.setText(GaudrophoneController.getController().getInstrumentManager().getName());
        GaudrophoneController.getController().getCanvasManager().setState(State.Play);
        GaudrophoneController.getController().getCanvasManager().findNewRatio(new Vector2(this.canvas.getWidth(), this.canvas.getHeight()));
        this.refresh();
    }//GEN-LAST:event_newPianoMenuItemActionPerformed

    private void menuEditNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditNextActionPerformed
        GaudrophoneController.getController().nextKey();
    }//GEN-LAST:event_menuEditNextActionPerformed

    private void menuEditPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditPreviousActionPerformed
        GaudrophoneController.getController().previousKey();
    }//GEN-LAST:event_menuEditPreviousActionPerformed

    private void noteComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noteComboBoxActionPerformed
        GaudrophoneController.getController().setNote((Note)this.noteComboBox.getSelectedItem());
    }//GEN-LAST:event_noteComboBoxActionPerformed

    private void waveformComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waveformComboBoxActionPerformed
        GaudrophoneController.getController().setWaveform((WaveFormType)this.waveformComboBox.getSelectedItem());
    }//GEN-LAST:event_waveformComboBoxActionPerformed

    private void searchTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFieldKeyReleased
        GaudrophoneController.getController().search(this.searchTextField.getText());
    }//GEN-LAST:event_searchTextFieldKeyReleased

    private void openSongMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openSongMenuItemActionPerformed
        fileDialog.setDialogTitle("Sélectionner un fichier");
        fileDialog.resetChoosableFileFilters();
        fileDialog.addChoosableFileFilter(new FileNameExtensionFilter("Fichier TXT","txt"));
        fileDialog.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        if (fileDialog.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            GaudrophoneController.getController().loadSong(fileDialog.getSelectedFile().getAbsolutePath());
            GaudrophoneController.getController().getCanvasManager().setState(State.AutoPlay);
        }
    }//GEN-LAST:event_openSongMenuItemActionPerformed

    private void masterWaveformComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_masterWaveformComboBoxActionPerformed
        GaudrophoneController.getController().setMasterWaveform((WaveFormType)this.masterWaveformComboBox.getSelectedItem());
    }//GEN-LAST:event_masterWaveformComboBoxActionPerformed

    private void instrumentNameFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_instrumentNameFieldKeyReleased
        GaudrophoneController.getController().getInstrumentManager().rename(this.instrumentNameField.getText());
        this.instrumentNameTextField.setText(this.instrumentNameField.getText());
    }//GEN-LAST:event_instrumentNameFieldKeyReleased

    private void bpmSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_bpmSpinnerStateChanged
        GaudrophoneController.getController().setBPM((int)this.bpmSpinner.getValue());
    }//GEN-LAST:event_bpmSpinnerStateChanged

    private void addPointButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPointButtonActionPerformed
        GaudrophoneController.getController().createPoint(GaudrophoneController.getController().getSelectionManager().getSelectedLine());
    }//GEN-LAST:event_addPointButtonActionPerformed

    private void muteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_muteButtonActionPerformed
        String state = GaudrophoneController.getController().toggleMute()? "on" : "off";
        this.muteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/mute_" + state + ".png")));
    }//GEN-LAST:event_muteButtonActionPerformed

    private void metronomeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metronomeButtonActionPerformed
        String state = GaudrophoneController.getController().toggleMetronome() ? "on" : "off";
        this.metronomeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/metronome_" + state + ".png")));
    }//GEN-LAST:event_metronomeButtonActionPerformed

    private void buttonAutoPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAutoPlayActionPerformed
        GaudrophoneController.getController().getCanvasManager().setState(State.AutoPlay);
    }//GEN-LAST:event_buttonAutoPlayActionPerformed

    private void buttonInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonInsertActionPerformed
        GaudrophoneController.getController().getCanvasManager().setState(State.CreatingShape);
        //select square
    }//GEN-LAST:event_buttonInsertActionPerformed

    private void menuModeAutoPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuModeAutoPlayActionPerformed
        GaudrophoneController.getController().getCanvasManager().setState(State.AutoPlay);
    }//GEN-LAST:event_menuModeAutoPlayActionPerformed

    private void menuModeInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuModeInsertActionPerformed
        GaudrophoneController.getController().getCanvasManager().setState(State.CreatingShape);
    }//GEN-LAST:event_menuModeInsertActionPerformed

    private void togglePlayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_togglePlayButtonActionPerformed
        GaudrophoneController.getController().togglePlay();
    }//GEN-LAST:event_togglePlayButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        GaudrophoneController.getController().getSequencer().stop();
        this.togglePlayButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnPlaySong.png")));
    }//GEN-LAST:event_stopButtonActionPerformed

    private void buttonMidiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMidiActionPerformed
        this.buttonMidi.setAction(new javax.swing.ImageIcon(getClass().getResource("/resources/" + GaudrophoneController.getController().midiAction() + ".png")));
    }//GEN-LAST:event_buttonMidiActionPerformed

    private void refreshMidiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshMidiActionPerformed
        GaudrophoneController.getController().getDeviceManager().refresh();
        this.buttonMidi.setVisible(GaudrophoneController.getController().getDeviceManager().hasDevice);
    }//GEN-LAST:event_refreshMidiActionPerformed
    
    private void saveInstrument() {
        fileDialog.setDialogTitle("Sélectionner un emplacement");
        FileFilter filter = new FileNameExtensionFilter("Fichier Gaudrophone","gaud");
        fileDialog.resetChoosableFileFilters();
        fileDialog.setFileFilter(filter);
        fileDialog.setFileSelectionMode(JFileChooser.FILES_ONLY);

        if (fileDialog.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            String filepath = fileDialog.getSelectedFile().getAbsolutePath();
            if (!filepath.endsWith(".gaud")) {
                filepath += ".gaud";
            }
            GaudrophoneController.getController().getInstrumentManager().saveInstrument(filepath);
        }
    }
    
    private void refresh() {
        GaudrophoneController.getController().getCanvasManager().drawKeys(GaudrophoneController.getController().getInstrumentManager().getInstrument().getKeys());
    }
    
    private void showPannel(Component pannel) {
        if (this.splitWindow.getRightComponent() != pannel) {
            this.splitWindow.setRightComponent(pannel);
            this.splitWindow.setDividerLocation(Math.max(this.splitWindow.getWidth()/2, this.splitWindow.getWidth()-500));
        }
    }
    
    public void setVisible() {
        java.awt.EventQueue.invokeLater(() -> {
            this.splitWindow.setLeftComponent(this.canvas);
            this.manageToolBar(State.Play);
            this.canvas.requestFocusInWindow();
            this.setVisible(true);
            
            GaudrophoneController.getController().delegate = this;
            GaudrophoneController.getController().getSelectionManager().delegate = this;
            GaudrophoneController.getController().getCanvasManager().delegate = this;

            this.canvas.addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mousePressed(java.awt.event.MouseEvent e) {
                    refresh();
                }

                @Override
                public void mouseReleased(java.awt.event.MouseEvent e) {
                    canvas.requestFocusInWindow();
                    refresh();
                }
            });
            
            this.canvas.addComponentListener(new java.awt.event.ComponentAdapter() {
                @Override
                public void componentResized(ComponentEvent e) {
                    GaudrophoneController.getController().getCanvasManager().setCanvasSize(e.getComponent().getWidth(), e.getComponent().getHeight());
                    refresh();
                }
            });
            
            this.canvas.setBackground(new Color(102,102,102));
            GaudrophoneController.getController().getCanvasManager().setCanvasSize(this.canvasPannel.getWidth(), this.canvasPannel.getHeight());
            GaudrophoneController.getController().getInstrumentManager().newInstrument();
            this.instrumentNameTextField.setText(GaudrophoneController.getController().getInstrumentManager().getName());
            this.instrumentNameField.setText(GaudrophoneController.getController().getInstrumentManager().getName());
            this.refresh();
            this.showPannel(this.playPannel);
            
            GaudrophoneController.getController().getDeviceManager().refresh();
            this.buttonMidi.setVisible(GaudrophoneController.getController().getDeviceManager().hasDevice);
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel KeyProperties;
    private javax.swing.JPanel LineColorSpacer;
    private javax.swing.JButton addPointButton;
    private javax.swing.ButtonGroup alterationButtonGroup;
    private javax.swing.JLabel alterationLabel;
    private javax.swing.JPanel alterationProperty;
    private javax.swing.JLabel attackLabel;
    private javax.swing.JSlider attackSlider;
    private javax.swing.JPanel attackSliderPanel;
    private javax.swing.JSpinner attackSpinner;
    private javax.swing.JLabel audioClipFileLabel;
    private javax.swing.JPanel audioClipFileProperty;
    private javax.swing.JLabel audioClipPathLabel;
    private javax.swing.JPanel audioClipProperties;
    private javax.swing.JRadioButton audioClipRadioButton;
    private java.awt.Button audioClipSelectButton;
    private javax.swing.JPanel audioPanel;
    private javax.swing.JPanel autoPlayTools;
    private javax.swing.JLabel backgroundDisplayLabel;
    private javax.swing.JLabel backgroundLabel;
    private javax.swing.JPanel backgroundSpacer;
    private javax.swing.JLabel backgroundSunkenDisplayLabel;
    private javax.swing.JLabel backgroundSunkenLabel;
    private javax.swing.JComboBox<String> borderComboBox;
    private javax.swing.JPanel borderPanel;
    private javax.swing.JLabel borderSelectLabel;
    private javax.swing.JLabel borderTitle;
    private javax.swing.JPanel borderWrapper;
    private javax.swing.JSpinner bpmSpinner;
    private javax.swing.JButton buttonAddImage;
    private javax.swing.JButton buttonAddSunkenImage;
    private javax.swing.JButton buttonAutoPlay;
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonDuplicate;
    private javax.swing.JButton buttonEditKey;
    private javax.swing.JButton buttonInsert;
    private javax.swing.JButton buttonMidi;
    private javax.swing.JButton buttonPlayMode;
    private javax.swing.JButton buttonRemoveImage;
    private javax.swing.JButton buttonRemoveSunkenImage;
    private javax.swing.Box.Filler canvasPannel;
    private javax.swing.JLabel colorTitle;
    private javax.swing.JLabel colorTitle1;
    private javax.swing.JPanel colorWrapper;
    private javax.swing.JPanel colorsPanel;
    private javax.swing.JMenuItem createRectangleMenuItem;
    private javax.swing.JMenuItem createTriangleMenuItem;
    private javax.swing.JLabel decayLabel;
    private javax.swing.JSlider decaySlider;
    private javax.swing.JPanel decaySliderPanel;
    private javax.swing.JSpinner decaySpinner;
    private javax.swing.JPanel depthProperty;
    private javax.swing.JCheckBox displayAlterationCheckBox;
    private javax.swing.JCheckBox displayNameCheckBox;
    private javax.swing.JCheckBox displayNoteCheckBox;
    private javax.swing.JCheckBox displayOctaveCheckBox;
    private javax.swing.JScrollPane editPannel;
    private javax.swing.JPanel envelopeGraph;
    private javax.swing.JLabel envelopeLabel;
    private javax.swing.JPanel envelopeProperties;
    private javax.swing.JPanel envelopeSliders;
    private javax.swing.JPanel envelopeTitlePanel;
    private javax.swing.JFileChooser fileDialog;
    private javax.swing.JMenu fileMenuItem;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler10;
    private javax.swing.Box.Filler filler11;
    private javax.swing.Box.Filler filler12;
    private javax.swing.Box.Filler filler13;
    private javax.swing.Box.Filler filler16;
    private javax.swing.Box.Filler filler17;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.Box.Filler filler7;
    private javax.swing.Box.Filler filler8;
    private javax.swing.Box.Filler filler9;
    private javax.swing.JRadioButton flatRadioButton;
    private javax.swing.JLabel frequencyLabel;
    private javax.swing.JPanel frequencyProperty;
    private javax.swing.JSpinner frequencySpinner;
    private javax.swing.JPanel generalProperties;
    private javax.swing.JScrollPane globalEditPannel;
    private javax.swing.JLabel hauteurTitle;
    private javax.swing.JPanel hauteurTitlePanel;
    private javax.swing.JLabel heightLabel;
    private javax.swing.JSpinner heightSpinner;
    private javax.swing.JLabel informationTitle;
    private javax.swing.JLabel informationTitle3;
    private javax.swing.JLabel informationTitle4;
    private javax.swing.JPanel informationWrapper;
    private javax.swing.JPanel informationWrapper3;
    private javax.swing.JPanel informationWrapper4;
    private javax.swing.JMenu insertMenuItem;
    private javax.swing.JScrollPane insertPannel;
    private javax.swing.JTextField instrumentNameField;
    private javax.swing.JTextField instrumentNameTextField;
    private javax.swing.JPanel instrumentPanel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTextField keyNameField;
    private javax.swing.JLabel keyNameLabel;
    private javax.swing.JLabel keyNameLabel3;
    private javax.swing.JLabel keyNameLabel4;
    private javax.swing.JLabel keyNameLabel8;
    private javax.swing.JPanel keyNameProperty;
    private javax.swing.JPanel keyNameProperty3;
    private javax.swing.JPanel keyNameProperty4;
    private javax.swing.JPanel keyNameProperty8;
    private javax.swing.ButtonGroup keyTypeButtonGroup;
    private javax.swing.JLabel lineColorEditButton;
    private javax.swing.JLabel lineColorLabel;
    private javax.swing.JPanel lineColorWrapper;
    private javax.swing.JPanel lineControlWrapper;
    private javax.swing.JLabel lineThicknessLabel;
    private javax.swing.JSpinner lineThicknessSpinner;
    private javax.swing.JPanel lineThicknessWrapper;
    private javax.swing.JPanel linesSelectionWrapper;
    private javax.swing.JPanel linesWrapper;
    private javax.swing.JComboBox<String> masterWaveformComboBox;
    private javax.swing.JMenuItem menuEditDelete;
    private javax.swing.JMenuItem menuEditDuplicate;
    private javax.swing.JMenuItem menuEditNext;
    private javax.swing.JMenuItem menuEditPrevious;
    private javax.swing.JMenuItem menuModeAutoPlay;
    private javax.swing.JMenuItem menuModeEditKey;
    private javax.swing.JMenuItem menuModeInsert;
    private javax.swing.JMenuItem menuModePlay;
    private javax.swing.JButton metronomeButton;
    private javax.swing.JButton muteButton;
    private javax.swing.JRadioButton naturalRadioButton;
    private javax.swing.JMenuItem newBlankMenuItem;
    private javax.swing.JMenuItem newGuitarMenuItem;
    private javax.swing.JMenu newMenu;
    private javax.swing.JMenuItem newPianoMenuItem;
    private javax.swing.JPanel normalProperty;
    private javax.swing.JLabel normalTitle;
    private javax.swing.JPanel normalWrapper;
    private javax.swing.JComboBox<String> noteComboBox;
    private javax.swing.JLabel noteNameLabel;
    private javax.swing.JPanel noteNameProperty;
    private javax.swing.JPanel noteProperties;
    private javax.swing.JLabel octaveLabel;
    private javax.swing.JSpinner octaveSpinner;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem openSongMenuItem;
    private javax.swing.JScrollPane playPannel;
    private javax.swing.JPanel playTools;
    private javax.swing.JPanel positionProperty;
    private javax.swing.JMenuItem quitMenuItem;
    private javax.swing.JLabel readSpeedLabel;
    private javax.swing.JPanel readSpeedProperty;
    private javax.swing.JSpinner readSpeedSpinner;
    private javax.swing.JMenuItem refreshMidi;
    private javax.swing.JLabel releaseLabel;
    private javax.swing.JSlider releaseSlider;
    private javax.swing.JPanel releaseSliderPanel;
    private javax.swing.JSpinner releaseSpinner;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JPanel selectedKeyTools;
    private javax.swing.JRadioButton sharpRadioButton;
    private javax.swing.JPanel showNameProperty;
    private javax.swing.JLabel showNoteNameLabel;
    private javax.swing.JPanel sizeProperty;
    private javax.swing.JPanel sizeTitleWrapper;
    private javax.swing.JPanel sizeWrapper;
    private javax.swing.JScrollPane songPannel;
    private javax.swing.JSplitPane splitWindow;
    private javax.swing.JButton stopButton;
    private javax.swing.JPanel sunkenProperty;
    private javax.swing.JPanel sunkenSpacer;
    private javax.swing.JLabel sunkenTitle;
    private javax.swing.JPanel sunkenWrapper;
    private javax.swing.JLabel sustainLabel;
    private javax.swing.JSlider sustainSlider;
    private javax.swing.JPanel sustainSliderPanel;
    private javax.swing.JSpinner sustainSpinner;
    private javax.swing.JRadioButton synthRadioButton;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JLabel textColorDisplayLabel;
    private javax.swing.JLabel textColorInfoLabel;
    private javax.swing.JPanel textColorSpacer;
    private javax.swing.JLabel textSunkenColorDisplayLabel;
    private javax.swing.JLabel textSunkenColorLabel;
    private javax.swing.JPanel textSunkenColorSpacer;
    private javax.swing.JLabel timbreTitle;
    private javax.swing.JPanel timbreTitlePanel;
    private javax.swing.JButton togglePlayButton;
    private javax.swing.JLabel tuningLabel;
    private javax.swing.JPanel tuningProperty;
    private javax.swing.JSpinner tuningSpinner;
    private javax.swing.JPanel typeProperty;
    private javax.swing.JPanel visualPanel;
    private javax.swing.JPanel visualPanel3;
    private javax.swing.JPanel visualPanel4;
    private javax.swing.JPanel visualPanel5;
    private javax.swing.JPanel visualWrapper;
    private javax.swing.JPanel visualWrapper3;
    private javax.swing.JPanel visualWrapper4;
    private javax.swing.JPanel visualWrapper5;
    private javax.swing.JLabel volumeLabel;
    private javax.swing.JPanel volumeProperty;
    private javax.swing.JSlider volumeSlider;
    private javax.swing.JSpinner volumeSpinner;
    private javax.swing.JLabel waveFormLabel;
    private javax.swing.JPanel waveFormProperty;
    private javax.swing.JComboBox<String> waveformComboBox;
    private javax.swing.JLabel widthLabel;
    private javax.swing.JSpinner widthSpinner;
    private javax.swing.JLabel xLabel;
    private javax.swing.JSpinner xSpinner;
    private javax.swing.JLabel yLabel;
    private javax.swing.JSpinner ySpinner;
    private javax.swing.JLabel zLabel;
    private javax.swing.JSpinner zSpinner;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    private void setPositionSpinners(Key key) {
        Vector2 origin = GaudrophoneController.getController().getCanvasManager().convertWorldToPixel(key.getShape().getCorner(Corner.topLeft));
        this.xSpinner.setValue((double)Math.round(origin.getX()));
        this.ySpinner.setValue((double)Math.round(origin.getY()));
    }
    
    public void setSizeSpinners(Key key) {
        Vector2 origin = key.getShape().getCorner(Corner.topLeft);
        Vector2 bottomRightOrigin = key.getShape().getCorner(Corner.bottomRight);
        
        Vector2 size = GaudrophoneController.getController().getCanvasManager().convertWorldToPixel(bottomRightOrigin.sub(origin));
        this.widthSpinner.setValue((double)Math.round(size.getX()));
        this.heightSpinner.setValue((double)Math.round(size.getY()));
    }
    
    @Override
    public void didSelectKey(Key key) {
        this.buttonMidi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/" + (key.isLinked() ? "midi_linked" : "midi_detected") + ".png")));
        
        this.keyNameField.setText(key.getName());
        this.noteComboBox.setSelectedItem(key.getNote());
        this.octaveSpinner.setValue(key.getOctave());
        this.volumeSpinner.setValue((int)(key.getSound().getVolume()*100));
        
        switch (key.getAlteration()) {
            case Natural:
                this.naturalRadioButton.setSelected(true);
                break;
            case Sharp:
                this.sharpRadioButton.setSelected(true);
                break;
            case Flat:
                this.flatRadioButton.setSelected(true);
                break;
        }
        
        this.attackSpinner.setValue(key.getSound().getEnvelope().getAttack());
        this.decaySpinner.setValue(key.getSound().getEnvelope().getDecay());
        this.sustainSpinner.setValue(key.getSound().getEnvelope().getSustain());
        this.releaseSpinner.setValue(key.getSound().getEnvelope().getRelease());
        
        this.displayNameCheckBox.setSelected((key.getStates() & KeyState.displayName.getValue()) != 0);
        this.displayNoteCheckBox.setSelected((key.getStates() & KeyState.displayNote.getValue()) != 0);
        this.displayOctaveCheckBox.setSelected((key.getStates() & KeyState.displayOctave.getValue()) != 0);
        this.displayAlterationCheckBox.setSelected((key.getStates() & KeyState.displayAlteration.getValue()) != 0);
        
        this.frequencySpinner.setValue(key.getFrequency());
        this.tuningSpinner.setValue(key.getTuning());
        
        if (key.getSound().getType() == SoundType.synthesizedSound) {
            this.synthRadioButton.setSelected(true);
            SynthesizedSound sound = (SynthesizedSound)key.getSound();
            this.waveformComboBox.setSelectedItem(sound.getWaveform());
        } else if (key.getSound().getType() == SoundType.audioClip) {
            this.audioClipRadioButton.setSelected(true);
            AudioClip sound = (AudioClip)key.getSound();
            this.audioClipPathLabel.setText(sound.getPath() == null ? "Aucun fichier" : sound.getPath());
            this.readSpeedSpinner.setValue(sound.getSpeed());
        }
        
        this.setPositionSpinners(key);
        this.setSizeSpinners(key);
        this.zSpinner.setValue(GaudrophoneController.getController().getInstrumentManager().getInstrument().getKeys().indexOf(key));
        
        this.backgroundDisplayLabel.setBackground(key.getShape().getIdleAppearance().getColor());
        this.backgroundSunkenDisplayLabel.setBackground(key.getShape().getSunkenAppearance().getColor());
        this.textColorDisplayLabel.setBackground(key.getShape().getIdleAppearance().getTextColor());
        this.textSunkenColorDisplayLabel.setBackground(key.getShape().getSunkenAppearance().getTextColor());
        
        this.selectedKeyTools.setVisible(true);
        this.buttonAddImage.setVisible(key.getShape().getIdleAppearance().getImagePath() == null);
        this.buttonAddSunkenImage.setVisible(key.getShape().getSunkenAppearance().getImagePath() == null);
        this.buttonRemoveImage.setVisible(key.getShape().getIdleAppearance().getImagePath() != null);
        this.buttonRemoveSunkenImage.setVisible(key.getShape().getSunkenAppearance().getImagePath() != null);
        
        String[] borders = new String[key.getShape().getLines().size() + 1 + 4];
        borders[0] = "Toutes";
        for (int i = 1; i <= key.getShape().getLines().size(); i++) {
            borders[i] = "Line " + i;
        }
        borders[borders.length - 4] = "Ligne Verticale";
        borders[borders.length - 3] = "Ligne Horizontale";
        borders[borders.length - 2] = "Ligne oblique inversé";
        borders[borders.length - 1] = "Ligne oblique";
        this.borderComboBox.setModel(new DefaultComboBoxModel(borders));
        this.borderComboBox.setSelectedIndex(-1);
        
        this.lineControlWrapper.setVisible(false);
        
        this.showPannel(this.editPannel);
                
        this.menuEditDelete.setEnabled(true);
        this.menuEditDuplicate.setEnabled(true);
    }
    
    @Override
    public void didDeselectKey() {
        this.selectedKeyTools.setVisible(false);
        
        this.showPannel(this.globalEditPannel);
        this.menuEditDelete.setEnabled(false);
        this.menuEditDuplicate.setEnabled(false);
    }

    @Override
    public void shouldRedraw() {
        this.canvas.repaint();
    }

    @Override
    public void shouldUpdateProprietyPannelFor(Key key) {
        this.didSelectKey(key);
    }

    @Override
    public void didMoveKey(Key key) {
        this.setPositionSpinners(key);
    }

    @Override
    public void didMovePoint(Key key) {
        this.setPositionSpinners(key);
        this.setSizeSpinners(key);
    }

    @Override
    public void didChangeState(State state) {
        this.menuEditNext.setEnabled(false);
        this.menuEditPrevious.setEnabled(false);
        this.manageToolBar(state);
        
        if (state != State.AutoPlay) {
            GaudrophoneController.getController().closeAutoPlay();
        }
        
        switch (state) {
            case Play:        
                this.showPannel(this.playPannel);
                break;
            case EditKey:
                this.menuEditNext.setEnabled(true);
                this.menuEditPrevious.setEnabled(true);
                this.showPannel(this.globalEditPannel);
                break;
            case AutoPlay:
                this.showPannel(this.songPannel);
                break;
            case CreatingShape:
                this.showPannel(this.insertPannel);
                break;
        }
    }
    
    private void manageToolBar(State state) { 
        this.buttonPlayMode.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnPlay.png")));
        this.buttonEditKey.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnEdit.png")));
        this.buttonAutoPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnAutoPlay.png")));
        this.buttonInsert.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnInsert.png")));
        this.metronomeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/metronome_off.png")));
        this.muteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/mute_off.png")));
        this.togglePlayButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnPlaySong.png")));
        
        this.playTools.setVisible(false);
        this.autoPlayTools.setVisible(false);
        this.selectedKeyTools.setVisible(false);
        switch (state) {
            case Play:
                this.buttonPlayMode.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnPlay_selected.png")));
                this.playTools.setVisible(true);
                break;
            case EditKey:
                this.buttonEditKey.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnEdit_selected.png")));
                break;
            case AutoPlay:
                this.buttonAutoPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnAutoPlay_selected.png")));
                this.autoPlayTools.setVisible(true);
                break;
            case CreatingShape:
                this.buttonInsert.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnInsert_selected.png")));
                break;
        }
    }

    @Override
    public void didSelectLine(Color color, double thickness) {
        this.lineColorEditButton.setBackground(color);
        this.lineThicknessSpinner.setValue(thickness);
        this.lineControlWrapper.setVisible(true);
    }

    @Override
    public void didSetBPM(int bpm) {
        this.bpmSpinner.setValue(bpm);
    }

    @Override
    public void didStopPlayingSong() {
        this.togglePlayButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnPlaySong.png")));
    }

    @Override
    public void didStartPlayingSong() {
        this.togglePlayButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnPause.png")));
    }

    @Override
    public void didPauseSong() {
        this.togglePlayButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnPlaySong.png")));
    }
}