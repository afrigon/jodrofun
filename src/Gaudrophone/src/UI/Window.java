/*
 * The MIT License
 *
 * Copyright 2017 Olivier.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package UI;

import Instrument.Guitar;
import Instrument.Key;
import Instrument.KeyState;
import Instrument.Note;
import KeyUtils.RectangleKeyShape;
import KeyUtils.TriangleKeyShape;
import KeyUtils.Vector2;
import Manager.CanvasManagerDelegate;
import Manager.GaudrophoneController;
import Manager.SelectionManagerDelegate;
import Manager.State;
import Music.Sound;
import Music.SynthesizedSound;
import java.awt.Color;
import java.awt.event.ComponentEvent;
import java.awt.event.ItemEvent;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

public class Window extends javax.swing.JFrame implements SelectionManagerDelegate, CanvasManagerDelegate {
    Canvas canvas = new Canvas(Manager.GaudrophoneController.getController().getCanvasManager());

    public Window() {
        initComponents();
        fileDialog.setCurrentDirectory(new File(System.getProperty("user.home")));
        noteProperties.setVisible(true);
        audioClipProperties.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        keyTypeButtonGroup = new javax.swing.ButtonGroup();
        alterationButtonGroup = new javax.swing.ButtonGroup();
        fileDialog = new javax.swing.JFileChooser();
        colorPicker = new javax.swing.JColorChooser();
        splitWindow = new javax.swing.JSplitPane();
        instrumentPanel = new javax.swing.JPanel();
        canvasPannel = new javax.swing.Box.Filler(new java.awt.Dimension(300, 100), new java.awt.Dimension(600, 600), new java.awt.Dimension(3000, 3000));
        rightScrollPane = new javax.swing.JScrollPane();
        PropertyPanel = new javax.swing.JPanel();
        KeyProperties = new javax.swing.JPanel();
        generalProperties = new javax.swing.JPanel();
        keyNameProperty = new javax.swing.JPanel();
        keyNameLabel = new javax.swing.JLabel();
        keyNameField = new javax.swing.JTextField();
        noteNameProperty = new javax.swing.JPanel();
        noteNameLabel = new javax.swing.JLabel();
        noteComboBox = new javax.swing.JComboBox(Note.values());
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(80, 0), new java.awt.Dimension(200, 32767));
        octaveLabel = new javax.swing.JLabel();
        octaveSpinner = new javax.swing.JSpinner();
        alterationProperty = new javax.swing.JPanel();
        alterationLabel = new javax.swing.JLabel();
        sharpRadioButton = new javax.swing.JRadioButton();
        naturalRadioButton = new javax.swing.JRadioButton();
        flatRadioButton = new javax.swing.JRadioButton();
        volumeProperty = new javax.swing.JPanel();
        volumeLabel = new javax.swing.JLabel();
        volumeSlider = new javax.swing.JSlider();
        volumeSpinner = new javax.swing.JSpinner();
        envelopeProperties = new javax.swing.JPanel();
        envelopeTitlePanel = new javax.swing.JPanel();
        envelopeLabel = new javax.swing.JLabel();
        envelopeGraph = new javax.swing.JPanel();
        envelopeSliders = new javax.swing.JPanel();
        attackSliderPanel = new javax.swing.JPanel();
        attackSlider = new javax.swing.JSlider();
        attackSpinner = new javax.swing.JSpinner();
        attackLabel = new javax.swing.JLabel();
        decaySliderPanel = new javax.swing.JPanel();
        decaySlider = new javax.swing.JSlider();
        decaySpinner = new javax.swing.JSpinner();
        decayLabel = new javax.swing.JLabel();
        sustainSliderPanel = new javax.swing.JPanel();
        sustainSlider = new javax.swing.JSlider();
        sustainSpinner = new javax.swing.JSpinner();
        sustainLabel = new javax.swing.JLabel();
        releaseSliderPanel = new javax.swing.JPanel();
        releaseSlider = new javax.swing.JSlider();
        releaseSpinner = new javax.swing.JSpinner();
        releaseLabel = new javax.swing.JLabel();
        showNameProperty = new javax.swing.JPanel();
        showNoteNameLabel = new javax.swing.JLabel();
        showKeyNameCheckbox = new java.awt.Checkbox();
        showNoteNameCheckbox = new java.awt.Checkbox();
        typeProperty = new javax.swing.JPanel();
        synthRadioButton = new javax.swing.JRadioButton();
        audioClipRadioButton = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();
        noteProperties = new javax.swing.JPanel();
        frequencyProperty = new javax.swing.JPanel();
        frequencyLabel = new javax.swing.JLabel();
        frequencySpinner = new javax.swing.JSpinner();
        tuningProperty = new javax.swing.JPanel();
        tuningLabel = new javax.swing.JLabel();
        tuningSpinner = new javax.swing.JSpinner();
        waveFormProperty = new javax.swing.JPanel();
        waveFormLabel = new javax.swing.JLabel();
        waveformComboBox = new javax.swing.JComboBox<>();
        audioClipProperties = new javax.swing.JPanel();
        audioClipFileProperty = new javax.swing.JPanel();
        audioClipFileLabel = new javax.swing.JLabel();
        audioClipPathLabel = new javax.swing.JLabel();
        audioClipSelectButton = new java.awt.Button();
        readSpeedProperty = new javax.swing.JPanel();
        readSpeedLabel = new javax.swing.JLabel();
        readSpeedSpinner = new javax.swing.JSpinner();
        jSeparator2 = new javax.swing.JSeparator();
        KeyShapeProperties = new javax.swing.JPanel();
        backgroundProperty = new javax.swing.JPanel();
        backgroundLabel = new javax.swing.JLabel();
        backgroundSpacer = new javax.swing.JPanel();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        backgroundDisplayLabel = new javax.swing.JLabel();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        backgroundColorButton = new java.awt.Button();
        backgroundImageButton = new java.awt.Button();
        backgroundSunkenProperty = new javax.swing.JPanel();
        backgroundSunkenLabel = new javax.swing.JLabel();
        sunkenSpacer = new javax.swing.JPanel();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        backgroundSunkenDisplayLabel = new javax.swing.JLabel();
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        backgroundSunkenColorButton = new java.awt.Button();
        backgroundSunkenImageButton = new java.awt.Button();
        linesColorProperty = new javax.swing.JPanel();
        linesColorLabel = new javax.swing.JLabel();
        linesColorDisplay = new javax.swing.JLabel();
        linesColorButton = new java.awt.Button();
        jToolBar1 = new javax.swing.JToolBar();
        buttonPlayMode = new javax.swing.JButton();
        buttonEditKey = new javax.swing.JButton();
        filler7 = new javax.swing.Box.Filler(new java.awt.Dimension(40, 0), new java.awt.Dimension(40, 0), new java.awt.Dimension(40, 32767));
        selectedKeyTools = new javax.swing.JPanel();
        buttonDuplicate = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenuItem = new javax.swing.JMenu();
        newMenu = new javax.swing.JMenu();
        newBlankMenuItem = new javax.swing.JMenuItem();
        newGuitarMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        quitMenuItem = new javax.swing.JMenuItem();
        insertMenuItem = new javax.swing.JMenu();
        createRectangleMenuItem = new javax.swing.JMenuItem();
        createTriangleMenuItem = new javax.swing.JMenuItem();

        fileDialog.setCurrentDirectory(new java.io.File("/"));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gaudrophone");
        setBackground(new java.awt.Color(65, 65, 65));
        setMinimumSize(new java.awt.Dimension(650, 500));

        splitWindow.setBackground(new java.awt.Color(65, 65, 65));
        splitWindow.setBorder(null);
        splitWindow.setDividerLocation(300);
        splitWindow.setContinuousLayout(true);
        splitWindow.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        instrumentPanel.setBackground(new java.awt.Color(102, 102, 102));
        instrumentPanel.setLayout(new java.awt.BorderLayout());
        instrumentPanel.add(canvasPannel, java.awt.BorderLayout.CENTER);

        splitWindow.setLeftComponent(instrumentPanel);

        rightScrollPane.setBackground(new java.awt.Color(65, 65, 65));
        rightScrollPane.setBorder(null);
        rightScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        rightScrollPane.setAutoscrolls(true);
        rightScrollPane.setMinimumSize(new java.awt.Dimension(350, 250));
        rightScrollPane.setPreferredSize(new java.awt.Dimension(350, 226));

        PropertyPanel.setBackground(new java.awt.Color(65, 65, 65));
        PropertyPanel.setPreferredSize(new java.awt.Dimension(400, 224));
        PropertyPanel.setLayout(new javax.swing.BoxLayout(PropertyPanel, javax.swing.BoxLayout.Y_AXIS));

        KeyProperties.setBackground(new java.awt.Color(65, 65, 65));
        KeyProperties.setLayout(new javax.swing.BoxLayout(KeyProperties, javax.swing.BoxLayout.Y_AXIS));

        generalProperties.setBackground(new java.awt.Color(65, 65, 65));
        generalProperties.setLayout(new javax.swing.BoxLayout(generalProperties, javax.swing.BoxLayout.Y_AXIS));

        keyNameProperty.setBackground(new java.awt.Color(65, 65, 65));
        keyNameProperty.setLayout(new java.awt.GridLayout(1, 0));

        keyNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        keyNameLabel.setText("Nom de la touche :");
        keyNameLabel.setPreferredSize(new java.awt.Dimension(119, 26));
        keyNameProperty.add(keyNameLabel);

        keyNameField.setBackground(new java.awt.Color(238, 238, 238));
        keyNameField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        keyNameField.setText("Nom de la touche");
        keyNameField.setBorder(null);
        keyNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                keyNameFieldKeyReleased(evt);
            }
        });
        keyNameProperty.add(keyNameField);

        generalProperties.add(keyNameProperty);

        noteNameProperty.setBackground(new java.awt.Color(65, 65, 65));
        noteNameProperty.setForeground(new java.awt.Color(255, 255, 255));
        noteNameProperty.setLayout(new javax.swing.BoxLayout(noteNameProperty, javax.swing.BoxLayout.LINE_AXIS));

        noteNameLabel.setBackground(new java.awt.Color(65, 65, 65));
        noteNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        noteNameLabel.setText("Nom de note :");
        noteNameProperty.add(noteNameLabel);

        noteNameProperty.add(noteComboBox);
        noteNameProperty.add(filler1);

        octaveLabel.setForeground(new java.awt.Color(255, 255, 255));
        octaveLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        octaveLabel.setText("Octave :");
        noteNameProperty.add(octaveLabel);

        octaveSpinner.setModel(new javax.swing.SpinnerNumberModel(2, -2, 8, 1));
        noteNameProperty.add(octaveSpinner);

        generalProperties.add(noteNameProperty);

        alterationProperty.setBackground(new java.awt.Color(65, 65, 65));
        alterationProperty.setLayout(new java.awt.GridLayout(1, 0));

        alterationLabel.setBackground(new java.awt.Color(65, 65, 65));
        alterationLabel.setForeground(new java.awt.Color(255, 255, 255));
        alterationLabel.setText("Altération :");
        alterationProperty.add(alterationLabel);

        sharpRadioButton.setBackground(new java.awt.Color(65, 65, 65));
        alterationButtonGroup.add(sharpRadioButton);
        sharpRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        sharpRadioButton.setText("Dièse");
        alterationProperty.add(sharpRadioButton);

        naturalRadioButton.setBackground(new java.awt.Color(65, 65, 65));
        alterationButtonGroup.add(naturalRadioButton);
        naturalRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        naturalRadioButton.setSelected(true);
        naturalRadioButton.setText("Naturelle");
        naturalRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                naturalRadioButtonActionPerformed(evt);
            }
        });
        alterationProperty.add(naturalRadioButton);

        flatRadioButton.setBackground(new java.awt.Color(65, 65, 65));
        alterationButtonGroup.add(flatRadioButton);
        flatRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        flatRadioButton.setText("Bémol");
        flatRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flatRadioButtonActionPerformed(evt);
            }
        });
        alterationProperty.add(flatRadioButton);

        generalProperties.add(alterationProperty);

        volumeProperty.setBackground(new java.awt.Color(65, 65, 65));
        volumeProperty.setLayout(new java.awt.GridLayout(1, 0));

        volumeLabel.setBackground(new java.awt.Color(65, 65, 65));
        volumeLabel.setForeground(new java.awt.Color(255, 255, 255));
        volumeLabel.setText("Volume :");
        volumeLabel.setOpaque(true);
        volumeProperty.add(volumeLabel);

        volumeSlider.setBackground(new java.awt.Color(65, 65, 65));
        volumeSlider.setForeground(new java.awt.Color(255, 255, 255));
        volumeSlider.setValue(100);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, volumeSpinner, org.jdesktop.beansbinding.ELProperty.create("${value}"), volumeSlider, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        volumeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                volumeSliderStateChanged(evt);
            }
        });
        volumeProperty.add(volumeSlider);

        volumeSpinner.setModel(new javax.swing.SpinnerNumberModel(100.0d, 0.0d, 100.0d, 1.0d));
        volumeSpinner.setValue(100);
        volumeProperty.add(volumeSpinner);

        generalProperties.add(volumeProperty);

        envelopeProperties.setBackground(new java.awt.Color(65, 65, 65));
        envelopeProperties.setLayout(new javax.swing.BoxLayout(envelopeProperties, javax.swing.BoxLayout.Y_AXIS));

        envelopeTitlePanel.setBackground(new java.awt.Color(65, 65, 65));
        envelopeTitlePanel.setLayout(new java.awt.GridLayout(1, 0));

        envelopeLabel.setForeground(new java.awt.Color(255, 255, 255));
        envelopeLabel.setText("Enveloppe :");
        envelopeLabel.setToolTipText("");
        envelopeLabel.setPreferredSize(new java.awt.Dimension(72, 26));
        envelopeTitlePanel.add(envelopeLabel);

        envelopeProperties.add(envelopeTitlePanel);

        envelopeGraph.setBackground(new java.awt.Color(51, 51, 51));
        envelopeGraph.setMinimumSize(new java.awt.Dimension(50, 100));
        envelopeGraph.setPreferredSize(new java.awt.Dimension(50, 125));

        javax.swing.GroupLayout envelopeGraphLayout = new javax.swing.GroupLayout(envelopeGraph);
        envelopeGraph.setLayout(envelopeGraphLayout);
        envelopeGraphLayout.setHorizontalGroup(
            envelopeGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 687, Short.MAX_VALUE)
        );
        envelopeGraphLayout.setVerticalGroup(
            envelopeGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 112, Short.MAX_VALUE)
        );

        envelopeProperties.add(envelopeGraph);

        envelopeSliders.setBackground(new java.awt.Color(65, 65, 65));
        envelopeSliders.setLayout(new javax.swing.BoxLayout(envelopeSliders, javax.swing.BoxLayout.X_AXIS));

        attackSliderPanel.setBackground(new java.awt.Color(65, 65, 65));
        attackSliderPanel.setLayout(new java.awt.BorderLayout());

        attackSlider.setBackground(new java.awt.Color(65, 65, 65));
        attackSlider.setForeground(new java.awt.Color(255, 255, 255));
        attackSlider.setMaximum(5000);
        attackSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        attackSlider.setValue(100);
        attackSlider.setMaximumSize(new java.awt.Dimension(50, 32767));
        attackSlider.setMinimumSize(new java.awt.Dimension(50, 36));
        attackSlider.setPreferredSize(new java.awt.Dimension(50, 200));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, attackSpinner, org.jdesktop.beansbinding.ELProperty.create("${value}"), attackSlider, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        attackSliderPanel.add(attackSlider, java.awt.BorderLayout.CENTER);
        attackSlider.setBackground(new Color(65, 65, 65));

        attackSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 1));
        attackSpinner.setPreferredSize(new java.awt.Dimension(20, 20));
        attackSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                attackSpinnerStateChanged(evt);
            }
        });
        attackSliderPanel.add(attackSpinner, java.awt.BorderLayout.PAGE_START);
        attackSpinner.setBackground(new Color(65, 65, 65));

        attackLabel.setBackground(new java.awt.Color(65, 65, 65));
        attackLabel.setForeground(new java.awt.Color(255, 255, 255));
        attackLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        attackLabel.setLabelFor(attackSlider);
        attackLabel.setText("Attack");
        attackLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        attackLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        attackLabel.setOpaque(true);
        attackSliderPanel.add(attackLabel, java.awt.BorderLayout.PAGE_END);

        envelopeSliders.add(attackSliderPanel);

        decaySliderPanel.setBackground(new java.awt.Color(65, 65, 65));
        decaySliderPanel.setLayout(new java.awt.BorderLayout());

        decaySlider.setBackground(new java.awt.Color(65, 65, 65));
        decaySlider.setForeground(new java.awt.Color(255, 255, 255));
        decaySlider.setMaximum(5000);
        decaySlider.setOrientation(javax.swing.JSlider.VERTICAL);
        decaySlider.setValue(100);
        decaySlider.setMaximumSize(new java.awt.Dimension(50, 32767));
        decaySlider.setMinimumSize(new java.awt.Dimension(50, 36));
        decaySlider.setPreferredSize(new java.awt.Dimension(50, 200));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, decaySpinner, org.jdesktop.beansbinding.ELProperty.create("${value}"), decaySlider, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        decaySliderPanel.add(decaySlider, java.awt.BorderLayout.CENTER);

        decaySpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 1));
        decaySpinner.setPreferredSize(new java.awt.Dimension(20, 20));
        decaySpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                decaySpinnerStateChanged(evt);
            }
        });
        decaySliderPanel.add(decaySpinner, java.awt.BorderLayout.PAGE_START);
        decaySpinner.setBackground(new Color(65, 65, 65));

        decayLabel.setBackground(new java.awt.Color(65, 65, 65));
        decayLabel.setForeground(new java.awt.Color(255, 255, 255));
        decayLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        decayLabel.setLabelFor(attackSlider);
        decayLabel.setText("Decay");
        decayLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        decayLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        decayLabel.setOpaque(true);
        decaySliderPanel.add(decayLabel, java.awt.BorderLayout.PAGE_END);

        envelopeSliders.add(decaySliderPanel);

        sustainSliderPanel.setBackground(new java.awt.Color(65, 65, 65));
        sustainSliderPanel.setLayout(new java.awt.BorderLayout());

        sustainSlider.setBackground(new java.awt.Color(65, 65, 65));
        sustainSlider.setForeground(new java.awt.Color(255, 255, 255));
        sustainSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        sustainSlider.setValue(80);
        sustainSlider.setMaximumSize(new java.awt.Dimension(50, 32767));
        sustainSlider.setMinimumSize(new java.awt.Dimension(50, 36));
        sustainSlider.setPreferredSize(new java.awt.Dimension(50, 200));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, sustainSpinner, org.jdesktop.beansbinding.ELProperty.create("${value}"), sustainSlider, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        sustainSliderPanel.add(sustainSlider, java.awt.BorderLayout.CENTER);

        sustainSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 1));
        sustainSpinner.setPreferredSize(new java.awt.Dimension(20, 20));
        sustainSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sustainSpinnerStateChanged(evt);
            }
        });
        sustainSliderPanel.add(sustainSpinner, java.awt.BorderLayout.PAGE_START);
        sustainSpinner.setBackground(new Color(65, 65, 65));

        sustainLabel.setBackground(new java.awt.Color(65, 65, 65));
        sustainLabel.setForeground(new java.awt.Color(255, 255, 255));
        sustainLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sustainLabel.setLabelFor(attackSlider);
        sustainLabel.setText("Sustain");
        sustainLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        sustainLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sustainLabel.setOpaque(true);
        sustainSliderPanel.add(sustainLabel, java.awt.BorderLayout.PAGE_END);

        envelopeSliders.add(sustainSliderPanel);

        releaseSliderPanel.setBackground(new java.awt.Color(65, 65, 65));
        releaseSliderPanel.setLayout(new java.awt.BorderLayout());

        releaseSlider.setBackground(new java.awt.Color(65, 65, 65));
        releaseSlider.setForeground(new java.awt.Color(255, 255, 255));
        releaseSlider.setMaximum(5000);
        releaseSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        releaseSlider.setValue(100);
        releaseSlider.setMaximumSize(new java.awt.Dimension(50, 32767));
        releaseSlider.setMinimumSize(new java.awt.Dimension(50, 36));
        releaseSlider.setPreferredSize(new java.awt.Dimension(50, 200));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, releaseSpinner, org.jdesktop.beansbinding.ELProperty.create("${value}"), releaseSlider, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        releaseSliderPanel.add(releaseSlider, java.awt.BorderLayout.CENTER);

        releaseSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 1));
        releaseSpinner.setPreferredSize(new java.awt.Dimension(20, 20));
        releaseSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                releaseSpinnerStateChanged(evt);
            }
        });
        releaseSliderPanel.add(releaseSpinner, java.awt.BorderLayout.PAGE_START);
        releaseSpinner.setBackground(new Color(65, 65, 65));

        releaseLabel.setBackground(new java.awt.Color(65, 65, 65));
        releaseLabel.setForeground(new java.awt.Color(255, 255, 255));
        releaseLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        releaseLabel.setLabelFor(attackSlider);
        releaseLabel.setText("Release");
        releaseLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        releaseLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        releaseLabel.setOpaque(true);
        releaseSliderPanel.add(releaseLabel, java.awt.BorderLayout.PAGE_END);

        envelopeSliders.add(releaseSliderPanel);

        envelopeProperties.add(envelopeSliders);
        envelopeSliders.setBackground(new Color(65, 65, 65));

        generalProperties.add(envelopeProperties);

        showNameProperty.setForeground(new java.awt.Color(255, 255, 255));
        showNameProperty.setLayout(new java.awt.GridLayout(1, 0));

        showNoteNameLabel.setBackground(new java.awt.Color(65, 65, 65));
        showNoteNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        showNoteNameLabel.setText("Affichage :");
        showNoteNameLabel.setToolTipText("");
        showNoteNameLabel.setOpaque(true);
        showNoteNameLabel.setPreferredSize(new java.awt.Dimension(68, 26));
        showNameProperty.add(showNoteNameLabel);

        showKeyNameCheckbox.setBackground(new java.awt.Color(65, 65, 65));
        showKeyNameCheckbox.setForeground(new java.awt.Color(255, 255, 255));
        showKeyNameCheckbox.setLabel("Nom de la touche");
        showKeyNameCheckbox.setState(true);
        showNameProperty.add(showKeyNameCheckbox);
        showNameProperty.setBackground(new java.awt.Color(65, 65, 65));

        showNoteNameCheckbox.setBackground(new java.awt.Color(65, 65, 65));
        showNoteNameCheckbox.setForeground(new java.awt.Color(255, 255, 255));
        showNoteNameCheckbox.setLabel("Nom de la note");
        showNoteNameCheckbox.setState(true);
        showNameProperty.add(showNoteNameCheckbox);

        generalProperties.add(showNameProperty);

        typeProperty.setBackground(new java.awt.Color(65, 65, 65));
        typeProperty.setLayout(new java.awt.GridLayout(1, 0));

        synthRadioButton.setBackground(new java.awt.Color(65, 65, 65));
        keyTypeButtonGroup.add(synthRadioButton);
        synthRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        synthRadioButton.setSelected(true);
        synthRadioButton.setText("Son");
        synthRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                synthRadioButtonItemStateChanged(evt);
            }
        });
        typeProperty.add(synthRadioButton);

        audioClipRadioButton.setBackground(new java.awt.Color(65, 65, 65));
        keyTypeButtonGroup.add(audioClipRadioButton);
        audioClipRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        audioClipRadioButton.setText("Fichier Audio");
        audioClipRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                audioClipRadioButtonActionPerformed(evt);
            }
        });
        typeProperty.add(audioClipRadioButton);

        generalProperties.add(typeProperty);

        KeyProperties.add(generalProperties);

        jSeparator1.setBackground(new java.awt.Color(65, 65, 65));
        jSeparator1.setForeground(new java.awt.Color(65, 65, 65));
        jSeparator1.setMinimumSize(new java.awt.Dimension(0, 5));
        jSeparator1.setPreferredSize(new java.awt.Dimension(0, 0));
        KeyProperties.add(jSeparator1);

        noteProperties.setBackground(new java.awt.Color(65, 65, 65));
        noteProperties.setLayout(new javax.swing.BoxLayout(noteProperties, javax.swing.BoxLayout.Y_AXIS));

        frequencyProperty.setBackground(new java.awt.Color(65, 65, 65));
        frequencyProperty.setLayout(new java.awt.GridLayout(1, 2));

        frequencyLabel.setBackground(new java.awt.Color(65, 65, 65));
        frequencyLabel.setForeground(new java.awt.Color(255, 255, 255));
        frequencyLabel.setText("Fréquence :");
        frequencyLabel.setOpaque(true);
        frequencyProperty.add(frequencyLabel);

        frequencySpinner.setModel(new javax.swing.SpinnerNumberModel(440.0d, 10.0d, 18000.0d, 0.1d));
        frequencySpinner.setEnabled(false);
        frequencyProperty.add(frequencySpinner);

        noteProperties.add(frequencyProperty);

        tuningProperty.setBackground(new java.awt.Color(65, 65, 65));
        tuningProperty.setLayout(new java.awt.GridLayout(1, 2));

        tuningLabel.setBackground(new java.awt.Color(65, 65, 65));
        tuningLabel.setForeground(new java.awt.Color(255, 255, 255));
        tuningLabel.setText("Tuning : ");
        tuningLabel.setOpaque(true);
        tuningProperty.add(tuningLabel);

        tuningSpinner.setModel(new javax.swing.SpinnerNumberModel(0, -49, 49, 1));
        tuningProperty.add(tuningSpinner);

        noteProperties.add(tuningProperty);

        waveFormProperty.setBackground(new java.awt.Color(65, 65, 65));
        waveFormProperty.setLayout(new java.awt.GridLayout(1, 0));

        waveFormLabel.setBackground(new java.awt.Color(65, 65, 65));
        waveFormLabel.setForeground(new java.awt.Color(255, 255, 255));
        waveFormLabel.setText("Forme d'onde :");
        waveFormLabel.setOpaque(true);
        waveFormProperty.add(waveFormLabel);

        waveformComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sine", "Square", "Triangle", "Saw" }));
        waveFormProperty.add(waveformComboBox);

        noteProperties.add(waveFormProperty);

        KeyProperties.add(noteProperties);

        audioClipProperties.setBackground(new java.awt.Color(65, 65, 65));
        audioClipProperties.setLayout(new javax.swing.BoxLayout(audioClipProperties, javax.swing.BoxLayout.Y_AXIS));

        audioClipFileProperty.setBackground(new java.awt.Color(65, 65, 65));
        audioClipFileProperty.setLayout(new java.awt.GridLayout(1, 2));

        audioClipFileLabel.setBackground(new java.awt.Color(65, 65, 65));
        audioClipFileLabel.setForeground(new java.awt.Color(255, 255, 255));
        audioClipFileLabel.setText("Fichier :");
        audioClipFileLabel.setOpaque(true);
        audioClipFileProperty.add(audioClipFileLabel);

        audioClipPathLabel.setBackground(new java.awt.Color(65, 65, 65));
        audioClipPathLabel.setForeground(new java.awt.Color(255, 255, 255));
        audioClipPathLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        audioClipPathLabel.setText("Aucun fichier");
        audioClipPathLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        audioClipPathLabel.setOpaque(true);
        audioClipFileProperty.add(audioClipPathLabel);

        audioClipSelectButton.setBackground(new java.awt.Color(102, 102, 102));
        audioClipSelectButton.setForeground(new java.awt.Color(65, 65, 65));
        audioClipSelectButton.setLabel("Fichier...");
        audioClipFileProperty.add(audioClipSelectButton);

        audioClipProperties.add(audioClipFileProperty);

        readSpeedProperty.setBackground(new java.awt.Color(65, 65, 65));
        readSpeedProperty.setLayout(new java.awt.GridLayout(1, 2));

        readSpeedLabel.setBackground(new java.awt.Color(65, 65, 65));
        readSpeedLabel.setForeground(new java.awt.Color(255, 255, 255));
        readSpeedLabel.setText("Pitch : ");
        readSpeedLabel.setOpaque(true);
        readSpeedProperty.add(readSpeedLabel);

        readSpeedSpinner.setModel(new javax.swing.SpinnerNumberModel(1.0d, 0.05d, 100.0d, 0.05d));
        readSpeedProperty.add(readSpeedSpinner);

        audioClipProperties.add(readSpeedProperty);

        KeyProperties.add(audioClipProperties);

        PropertyPanel.add(KeyProperties);

        jSeparator2.setBackground(new java.awt.Color(65, 65, 65));
        jSeparator2.setForeground(new java.awt.Color(65, 65, 65));
        jSeparator2.setPreferredSize(new java.awt.Dimension(50, 5));
        PropertyPanel.add(jSeparator2);

        KeyShapeProperties.setBackground(new java.awt.Color(65, 65, 65));
        KeyShapeProperties.setLayout(new javax.swing.BoxLayout(KeyShapeProperties, javax.swing.BoxLayout.Y_AXIS));

        backgroundProperty.setBackground(new java.awt.Color(65, 65, 65));
        backgroundProperty.setLayout(new java.awt.GridLayout(1, 10, 10, 0));

        backgroundLabel.setBackground(new java.awt.Color(65, 65, 65));
        backgroundLabel.setForeground(new java.awt.Color(255, 255, 255));
        backgroundLabel.setText("Couleur de fond :");
        backgroundLabel.setOpaque(true);
        backgroundProperty.add(backgroundLabel);

        backgroundSpacer.setBackground(new java.awt.Color(65, 65, 65));
        backgroundSpacer.setLayout(new java.awt.GridLayout(1, 0));

        filler2.setBackground(new java.awt.Color(65, 65, 65));
        backgroundSpacer.add(filler2);

        backgroundDisplayLabel.setBackground(new java.awt.Color(65, 65, 65));
        backgroundDisplayLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        backgroundDisplayLabel.setToolTipText("");
        backgroundDisplayLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        backgroundDisplayLabel.setOpaque(true);
        backgroundSpacer.add(backgroundDisplayLabel);

        filler3.setBackground(new java.awt.Color(65, 65, 65));
        backgroundSpacer.add(filler3);

        backgroundProperty.add(backgroundSpacer);

        backgroundColorButton.setBackground(new java.awt.Color(102, 102, 102));
        backgroundColorButton.setForeground(new java.awt.Color(65, 65, 65));
        backgroundColorButton.setLabel("Couleur...");
        backgroundColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backgroundColorButtonActionPerformed(evt);
            }
        });
        backgroundProperty.add(backgroundColorButton);

        backgroundImageButton.setBackground(new java.awt.Color(102, 102, 102));
        backgroundImageButton.setForeground(new java.awt.Color(65, 65, 65));
        backgroundImageButton.setLabel("Image...");
        backgroundImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backgroundImageButtonActionPerformed(evt);
            }
        });
        backgroundProperty.add(backgroundImageButton);

        KeyShapeProperties.add(backgroundProperty);

        backgroundSunkenProperty.setBackground(new java.awt.Color(65, 65, 65));
        backgroundSunkenProperty.setLayout(new java.awt.GridLayout(1, 0, 10, 0));

        backgroundSunkenLabel.setBackground(new java.awt.Color(65, 65, 65));
        backgroundSunkenLabel.setForeground(new java.awt.Color(255, 255, 255));
        backgroundSunkenLabel.setText("Couleur enfoncée :");
        backgroundSunkenLabel.setOpaque(true);
        backgroundSunkenProperty.add(backgroundSunkenLabel);

        sunkenSpacer.setBackground(new java.awt.Color(65, 65, 65));
        sunkenSpacer.setLayout(new java.awt.GridLayout(1, 0));

        filler4.setBackground(new java.awt.Color(65, 65, 65));
        sunkenSpacer.add(filler4);

        filler6.setBackground(new java.awt.Color(65, 65, 65));
        sunkenSpacer.add(filler6);

        backgroundSunkenDisplayLabel.setBackground(new java.awt.Color(65, 65, 65));
        backgroundSunkenDisplayLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        backgroundSunkenDisplayLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        backgroundSunkenDisplayLabel.setOpaque(true);
        sunkenSpacer.add(backgroundSunkenDisplayLabel);

        filler5.setBackground(new java.awt.Color(65, 65, 65));
        sunkenSpacer.add(filler5);

        backgroundSunkenProperty.add(sunkenSpacer);

        backgroundSunkenColorButton.setBackground(new java.awt.Color(102, 102, 102));
        backgroundSunkenColorButton.setForeground(new java.awt.Color(65, 65, 65));
        backgroundSunkenColorButton.setLabel("Couleur...");
        backgroundSunkenColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backgroundSunkenColorButtonActionPerformed(evt);
            }
        });
        backgroundSunkenProperty.add(backgroundSunkenColorButton);

        backgroundSunkenImageButton.setBackground(new java.awt.Color(102, 102, 102));
        backgroundSunkenImageButton.setForeground(new java.awt.Color(65, 65, 65));
        backgroundSunkenImageButton.setLabel("Image...");
        backgroundSunkenImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backgroundSunkenImageButtonActionPerformed(evt);
            }
        });
        backgroundSunkenProperty.add(backgroundSunkenImageButton);

        KeyShapeProperties.add(backgroundSunkenProperty);

        linesColorProperty.setBackground(new java.awt.Color(65, 65, 65));
        linesColorProperty.setLayout(new java.awt.GridLayout(1, 0));

        linesColorLabel.setBackground(new java.awt.Color(65, 65, 65));
        linesColorLabel.setForeground(new java.awt.Color(255, 255, 255));
        linesColorLabel.setText("Couleur du contour :");
        linesColorLabel.setOpaque(true);
        linesColorProperty.add(linesColorLabel);

        linesColorDisplay.setBackground(new java.awt.Color(65, 65, 65));
        linesColorDisplay.setForeground(new java.awt.Color(255, 255, 255));
        linesColorDisplay.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        linesColorDisplay.setText("Custom");
        linesColorDisplay.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        linesColorDisplay.setOpaque(true);
        linesColorProperty.add(linesColorDisplay);

        linesColorButton.setBackground(new java.awt.Color(102, 102, 102));
        linesColorButton.setForeground(new java.awt.Color(65, 65, 65));
        linesColorButton.setLabel("Couleur...");
        linesColorProperty.add(linesColorButton);

        KeyShapeProperties.add(linesColorProperty);

        PropertyPanel.add(KeyShapeProperties);

        rightScrollPane.setViewportView(PropertyPanel);

        splitWindow.setRightComponent(rightScrollPane);

        getContentPane().add(splitWindow, java.awt.BorderLayout.CENTER);

        jToolBar1.setBackground(new java.awt.Color(51, 51, 51));
        jToolBar1.setBorder(null);
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        buttonPlayMode.setBackground(new java.awt.Color(65, 65, 65));
        buttonPlayMode.setForeground(new java.awt.Color(0, 0, 255));
        buttonPlayMode.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnPlay.png"))); // NOI18N
        buttonPlayMode.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));
        buttonPlayMode.setBorderPainted(false);
        buttonPlayMode.setFocusable(false);
        buttonPlayMode.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonPlayMode.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonPlayMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPlayModeActionPerformed(evt);
            }
        });
        jToolBar1.add(buttonPlayMode);

        buttonEditKey.setBackground(new java.awt.Color(65, 65, 65));
        buttonEditKey.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnEdit.png"))); // NOI18N
        buttonEditKey.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));
        buttonEditKey.setBorderPainted(false);
        buttonEditKey.setFocusable(false);
        buttonEditKey.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonEditKey.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonEditKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditKeyActionPerformed(evt);
            }
        });
        jToolBar1.add(buttonEditKey);
        jToolBar1.add(filler7);

        selectedKeyTools.setOpaque(false);
        selectedKeyTools.setLayout(new javax.swing.BoxLayout(selectedKeyTools, javax.swing.BoxLayout.LINE_AXIS));

        buttonDuplicate.setBackground(new java.awt.Color(65, 65, 65));
        buttonDuplicate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnDuplicate.png"))); // NOI18N
        buttonDuplicate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));
        buttonDuplicate.setBorderPainted(false);
        buttonDuplicate.setFocusable(false);
        buttonDuplicate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonDuplicate.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonDuplicate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDuplicateActionPerformed(evt);
            }
        });
        selectedKeyTools.add(buttonDuplicate);

        buttonDelete.setBackground(new java.awt.Color(65, 65, 65));
        buttonDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnDelete.png"))); // NOI18N
        buttonDelete.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));
        buttonDelete.setBorderPainted(false);
        buttonDelete.setFocusable(false);
        buttonDelete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonDelete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });
        selectedKeyTools.add(buttonDelete);

        jToolBar1.add(selectedKeyTools);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        fileMenuItem.setBorder(null);
        fileMenuItem.setText("Fichier");

        newMenu.setBorder(null);
        newMenu.setText("Nouveau");

        newBlankMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newBlankMenuItem.setText("Vide");
        newBlankMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBlankMenuItemActionPerformed(evt);
            }
        });
        newMenu.add(newBlankMenuItem);

        newGuitarMenuItem.setText("Guitare");
        newGuitarMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGuitarMenuItemActionPerformed(evt);
            }
        });
        newMenu.add(newGuitarMenuItem);

        fileMenuItem.add(newMenu);

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setText("Ouvrir");
        openMenuItem.setBorder(null);
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenuItem.add(openMenuItem);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setText("Enregistrer");
        saveMenuItem.setBorder(null);
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenuItem.add(saveMenuItem);

        saveAsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        saveAsMenuItem.setText("Enregistrer sous");
        saveAsMenuItem.setBorder(null);
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenuItem.add(saveAsMenuItem);

        quitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        quitMenuItem.setText("Quitter");
        quitMenuItem.setBorder(null);
        quitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitMenuItemActionPerformed(evt);
            }
        });
        fileMenuItem.add(quitMenuItem);

        jMenuBar1.add(fileMenuItem);

        insertMenuItem.setBorder(null);
        insertMenuItem.setText("Insérer");

        createRectangleMenuItem.setText("Rectangle");
        createRectangleMenuItem.setBorder(null);
        createRectangleMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createRectangleMenuItemActionPerformed(evt);
            }
        });
        insertMenuItem.add(createRectangleMenuItem);

        createTriangleMenuItem.setText("Triangle");
        createTriangleMenuItem.setBorder(null);
        createTriangleMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createTriangleMenuItemActionPerformed(evt);
            }
        });
        insertMenuItem.add(createTriangleMenuItem);

        jMenuBar1.add(insertMenuItem);

        setJMenuBar(jMenuBar1);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void flatRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flatRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_flatRadioButtonActionPerformed

    private void audioClipRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_audioClipRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_audioClipRadioButtonActionPerformed

    private void naturalRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_naturalRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_naturalRadioButtonActionPerformed

    private void newBlankMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBlankMenuItemActionPerformed
        GaudrophoneController.getController().getInstrumentManager().newInstrument();
        this.refresh();
    }//GEN-LAST:event_newBlankMenuItemActionPerformed

    private void newGuitarMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGuitarMenuItemActionPerformed
        GaudrophoneController.getController().getInstrumentManager().newInstrument(new Guitar());
        this.refresh();
    }//GEN-LAST:event_newGuitarMenuItemActionPerformed

    private void quitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_quitMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        fileDialog.setDialogTitle("Sélectionner un fichier");
        FileFilter filter = new FileNameExtensionFilter("Fichier Gaudrophone","gaud");
        fileDialog.resetChoosableFileFilters();
        fileDialog.setFileFilter(filter);
        fileDialog.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        if (fileDialog.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            GaudrophoneController.getController().getInstrumentManager().openInstrument(fileDialog.getSelectedFile().getAbsolutePath());
            this.refresh();
        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        if (!GaudrophoneController.getController().getInstrumentManager().saveInstrument()) {
            saveInstrument();
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        saveInstrument();
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void createRectangleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createRectangleMenuItemActionPerformed
        this.resetButtons();
        GaudrophoneController.getController().getCanvasManager().setState(State.CreatingShape);
        GaudrophoneController.getController().getCanvasManager().setStoredKeyGenerator(new RectangleKeyShape());
    }//GEN-LAST:event_createRectangleMenuItemActionPerformed

    private void createTriangleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createTriangleMenuItemActionPerformed
        this.resetButtons();
        GaudrophoneController.getController().getCanvasManager().setState(State.CreatingShape);
        GaudrophoneController.getController().getCanvasManager().setStoredKeyGenerator(new TriangleKeyShape());
    }//GEN-LAST:event_createTriangleMenuItemActionPerformed

    private void buttonPlayModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPlayModeActionPerformed
        GaudrophoneController.getController().getCanvasManager().setState(State.Play);
        this.resetButtons();
        buttonPlayMode.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnPlay_selected.png")));
    }//GEN-LAST:event_buttonPlayModeActionPerformed

    private void buttonEditKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditKeyActionPerformed
        GaudrophoneController.getController().getCanvasManager().setState(State.EditKey);
        this.resetButtons();
        buttonEditKey.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnEdit_selected.png")));
    }//GEN-LAST:event_buttonEditKeyActionPerformed

    private void backgroundColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backgroundColorButtonActionPerformed
        Color color = colorPicker.showDialog(this, "Choisir une couleur", GaudrophoneController.getController().getKeyColor());
        if (color != null) {
            GaudrophoneController.getController().setKeyColor(color);
        }
    }//GEN-LAST:event_backgroundColorButtonActionPerformed

    private void backgroundSunkenColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backgroundSunkenColorButtonActionPerformed
        Color color = colorPicker.showDialog(this, "Choisir une couleur", GaudrophoneController.getController().getKeyColor());
        if (color != null) {
            GaudrophoneController.getController().setKeySunkenColor(color);
        }
    }//GEN-LAST:event_backgroundSunkenColorButtonActionPerformed

    private void backgroundImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backgroundImageButtonActionPerformed
        fileDialog.setDialogTitle("Sélectionner une image");
        fileDialog.resetChoosableFileFilters();
        fileDialog.setFileFilter(new FileNameExtensionFilter("Fichier JPEG","jpg"));
        fileDialog.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        if (fileDialog.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            GaudrophoneController.getController().setKeyImage(fileDialog.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_backgroundImageButtonActionPerformed

    private void backgroundSunkenImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backgroundSunkenImageButtonActionPerformed
        fileDialog.setDialogTitle("Sélectionner une image");
        fileDialog.resetChoosableFileFilters();
        fileDialog.setFileFilter(new FileNameExtensionFilter("Fichier JPEG","jpg"));
        fileDialog.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        if (fileDialog.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            GaudrophoneController.getController().setKeySunkenImage(fileDialog.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_backgroundSunkenImageButtonActionPerformed

    private void keyNameFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keyNameFieldKeyReleased
        GaudrophoneController.getController().setName(keyNameField.getText());
    }//GEN-LAST:event_keyNameFieldKeyReleased

    private void attackSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_attackSpinnerStateChanged
        GaudrophoneController.getController().setAttack((double)attackSlider.getValue());
    }//GEN-LAST:event_attackSpinnerStateChanged

    private void decaySpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_decaySpinnerStateChanged
        GaudrophoneController.getController().setDecay((double)decaySlider.getValue());
    }//GEN-LAST:event_decaySpinnerStateChanged

    private void sustainSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sustainSpinnerStateChanged
        GaudrophoneController.getController().setSustain((double)sustainSlider.getValue());
    }//GEN-LAST:event_sustainSpinnerStateChanged

    private void releaseSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_releaseSpinnerStateChanged
        GaudrophoneController.getController().setRelease((double)releaseSlider.getValue());
    }//GEN-LAST:event_releaseSpinnerStateChanged

    private void synthRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_synthRadioButtonItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED) {
            noteProperties.setVisible(true);
            audioClipProperties.setVisible(false);
        }
        else if(evt.getStateChange() == ItemEvent.DESELECTED) {
            noteProperties.setVisible(false);
            audioClipProperties.setVisible(true);
        }
    }//GEN-LAST:event_synthRadioButtonItemStateChanged

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
        GaudrophoneController.getController().deleteKey();
    }//GEN-LAST:event_buttonDeleteActionPerformed

    private void buttonDuplicateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDuplicateActionPerformed
        GaudrophoneController.getController().duplicateKey();
    }//GEN-LAST:event_buttonDuplicateActionPerformed

    private void volumeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_volumeSliderStateChanged
        GaudrophoneController.getController().setVolume((double)volumeSlider.getValue()/100);
    }//GEN-LAST:event_volumeSliderStateChanged
    
    private void resetButtons() {
        if (this.splitWindow.getRightComponent() != null) {
            this.splitWindow.setRightComponent(null);
        }
        buttonPlayMode.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnPlay.png")));
        buttonEditKey.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btnEdit.png")));
    }
    
    private void saveInstrument() {
        fileDialog.setDialogTitle("Sélectionner un emplacement");
        FileFilter filter = new FileNameExtensionFilter("Fichier Gaudrophone","gaud");
        fileDialog.resetChoosableFileFilters();
        fileDialog.setFileFilter(filter);
        fileDialog.setFileSelectionMode(JFileChooser.FILES_ONLY);

        if (fileDialog.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            String filepath = fileDialog.getSelectedFile().getAbsolutePath();
            if (!filepath.endsWith(".gaud")) {
                filepath += ".gaud";
            }
            GaudrophoneController.getController().getInstrumentManager().saveInstrument(filepath);
        }
    }
    
    private void refresh() {
        GaudrophoneController.getController().getCanvasManager().drawKeys(GaudrophoneController.getController().getInstrumentManager().getInstrument().getKeys());
    }
    
    /**
     * @param args the command line arguments
     */
    public void setVisible() {
        java.awt.EventQueue.invokeLater(() -> {
            this.splitWindow.setLeftComponent(canvas);
            this.splitWindow.remove(this.rightScrollPane);
            this.selectedKeyTools.setVisible(false);
            this.setVisible(true);
            canvas.setFocusable(true);
            canvas.requestFocusInWindow();
            
            this.canvas.setBackground(new Color(102,102,102));
            this.canvas.addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mousePressed(java.awt.event.MouseEvent e) {
                    refresh();
                }

                @Override
                public void mouseReleased(java.awt.event.MouseEvent e) {
                    refresh();
                }
            });
            
            this.canvas.addComponentListener(new java.awt.event.ComponentAdapter() {
                @Override
                public void componentResized(ComponentEvent e) {
                    GaudrophoneController.getController().getCanvasManager().setCanvasSize(e.getComponent().getWidth(), e.getComponent().getHeight());
                    refresh();
                }
            });
            
            GaudrophoneController.getController().getCanvasManager().setCanvasSize(this.canvasPannel.getWidth(), this.canvasPannel.getHeight());
            GaudrophoneController.getController().getSelectionManager().delegate = this;
            GaudrophoneController.getController().getCanvasManager().delegate = this;
            
            GaudrophoneController.getController().getInstrumentManager().newInstrument();
            
            
//            MINI-PIANO
            Key key = new Key(new SynthesizedSound(440), new RectangleKeyShape().generateSquare(50, new Vector2(2, 2)), "A");
            key.getShape().getIdleAppearance().setColor(Color.yellow);
            GaudrophoneController.getController().getInstrumentManager().getInstrument().addKey(key);

            Key key1 = new Key(new SynthesizedSound(493.88), new RectangleKeyShape().generateSquare(50, new Vector2(52, 2)), "B");
            key1.getShape().getIdleAppearance().setColor(Color.PINK);
            GaudrophoneController.getController().getInstrumentManager().getInstrument().addKey(key1);

            Key key2 = new Key(new SynthesizedSound(523.25), new RectangleKeyShape().generateSquare(50, new Vector2(104, 2)), "C");
            key2.getShape().getIdleAppearance().setColor(Color.CYAN);
            GaudrophoneController.getController().getInstrumentManager().getInstrument().addKey(key2);

            Key key3 = new Key(new SynthesizedSound(587.33), new RectangleKeyShape().generateSquare(50, new Vector2(156, 2)), "D");
            key3.getShape().getIdleAppearance().setColor(Color.MAGENTA);
            GaudrophoneController.getController().getInstrumentManager().getInstrument().addKey(key3);

            Sound sound = new SynthesizedSound(659.25);
            Key key4 = new Key(sound, new RectangleKeyShape().generateSquare(50, new Vector2(208, 2)), "E");
            key4.getShape().getIdleAppearance().setColor(Color.green);
            GaudrophoneController.getController().getInstrumentManager().getInstrument().addKey(key4);

            this.refresh();
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel KeyProperties;
    private javax.swing.JPanel KeyShapeProperties;
    private javax.swing.JPanel PropertyPanel;
    private javax.swing.ButtonGroup alterationButtonGroup;
    private javax.swing.JLabel alterationLabel;
    private javax.swing.JPanel alterationProperty;
    private javax.swing.JLabel attackLabel;
    private javax.swing.JSlider attackSlider;
    private javax.swing.JPanel attackSliderPanel;
    private javax.swing.JSpinner attackSpinner;
    private javax.swing.JLabel audioClipFileLabel;
    private javax.swing.JPanel audioClipFileProperty;
    private javax.swing.JLabel audioClipPathLabel;
    private javax.swing.JPanel audioClipProperties;
    private javax.swing.JRadioButton audioClipRadioButton;
    private java.awt.Button audioClipSelectButton;
    private java.awt.Button backgroundColorButton;
    private javax.swing.JLabel backgroundDisplayLabel;
    private java.awt.Button backgroundImageButton;
    private javax.swing.JLabel backgroundLabel;
    private javax.swing.JPanel backgroundProperty;
    private javax.swing.JPanel backgroundSpacer;
    private java.awt.Button backgroundSunkenColorButton;
    private javax.swing.JLabel backgroundSunkenDisplayLabel;
    private java.awt.Button backgroundSunkenImageButton;
    private javax.swing.JLabel backgroundSunkenLabel;
    private javax.swing.JPanel backgroundSunkenProperty;
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonDuplicate;
    private javax.swing.JButton buttonEditKey;
    private javax.swing.JButton buttonPlayMode;
    private javax.swing.Box.Filler canvasPannel;
    private javax.swing.JColorChooser colorPicker;
    private javax.swing.JMenuItem createRectangleMenuItem;
    private javax.swing.JMenuItem createTriangleMenuItem;
    private javax.swing.JLabel decayLabel;
    private javax.swing.JSlider decaySlider;
    private javax.swing.JPanel decaySliderPanel;
    private javax.swing.JSpinner decaySpinner;
    private javax.swing.JPanel envelopeGraph;
    private javax.swing.JLabel envelopeLabel;
    private javax.swing.JPanel envelopeProperties;
    private javax.swing.JPanel envelopeSliders;
    private javax.swing.JPanel envelopeTitlePanel;
    private javax.swing.JFileChooser fileDialog;
    private javax.swing.JMenu fileMenuItem;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.Box.Filler filler7;
    private javax.swing.JRadioButton flatRadioButton;
    private javax.swing.JLabel frequencyLabel;
    private javax.swing.JPanel frequencyProperty;
    private javax.swing.JSpinner frequencySpinner;
    private javax.swing.JPanel generalProperties;
    private javax.swing.JMenu insertMenuItem;
    private javax.swing.JPanel instrumentPanel;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTextField keyNameField;
    private javax.swing.JLabel keyNameLabel;
    private javax.swing.JPanel keyNameProperty;
    private javax.swing.ButtonGroup keyTypeButtonGroup;
    private java.awt.Button linesColorButton;
    private javax.swing.JLabel linesColorDisplay;
    private javax.swing.JLabel linesColorLabel;
    private javax.swing.JPanel linesColorProperty;
    private javax.swing.JRadioButton naturalRadioButton;
    private javax.swing.JMenuItem newBlankMenuItem;
    private javax.swing.JMenuItem newGuitarMenuItem;
    private javax.swing.JMenu newMenu;
    private javax.swing.JComboBox<String> noteComboBox;
    private javax.swing.JLabel noteNameLabel;
    private javax.swing.JPanel noteNameProperty;
    private javax.swing.JPanel noteProperties;
    private javax.swing.JLabel octaveLabel;
    private javax.swing.JSpinner octaveSpinner;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem quitMenuItem;
    private javax.swing.JLabel readSpeedLabel;
    private javax.swing.JPanel readSpeedProperty;
    private javax.swing.JSpinner readSpeedSpinner;
    private javax.swing.JLabel releaseLabel;
    private javax.swing.JSlider releaseSlider;
    private javax.swing.JPanel releaseSliderPanel;
    private javax.swing.JSpinner releaseSpinner;
    private javax.swing.JScrollPane rightScrollPane;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JPanel selectedKeyTools;
    private javax.swing.JRadioButton sharpRadioButton;
    private java.awt.Checkbox showKeyNameCheckbox;
    private javax.swing.JPanel showNameProperty;
    private java.awt.Checkbox showNoteNameCheckbox;
    private javax.swing.JLabel showNoteNameLabel;
    private javax.swing.JSplitPane splitWindow;
    private javax.swing.JPanel sunkenSpacer;
    private javax.swing.JLabel sustainLabel;
    private javax.swing.JSlider sustainSlider;
    private javax.swing.JPanel sustainSliderPanel;
    private javax.swing.JSpinner sustainSpinner;
    private javax.swing.JRadioButton synthRadioButton;
    private javax.swing.JLabel tuningLabel;
    private javax.swing.JPanel tuningProperty;
    private javax.swing.JSpinner tuningSpinner;
    private javax.swing.JPanel typeProperty;
    private javax.swing.JLabel volumeLabel;
    private javax.swing.JPanel volumeProperty;
    private javax.swing.JSlider volumeSlider;
    private javax.swing.JSpinner volumeSpinner;
    private javax.swing.JLabel waveFormLabel;
    private javax.swing.JPanel waveFormProperty;
    private javax.swing.JComboBox<String> waveformComboBox;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    @Override
    public void didSelectKey(Key key) {
        this.keyNameField.setText(key.getName());
        this.attackSpinner.setValue(key.getSound().getEnvelope().getAttack());
        this.decaySpinner.setValue(key.getSound().getEnvelope().getDecay());
        this.sustainSpinner.setValue(key.getSound().getEnvelope().getSustain());
        this.releaseSpinner.setValue(key.getSound().getEnvelope().getRelease());
        this.volumeSpinner.setValue((int)(key.getSound().getVolume()*100));
        this.showKeyNameCheckbox.setState((key.getStates() & KeyState.displayName.getValue()) != 0);
        this.showNoteNameCheckbox.setState((key.getStates() & KeyState.displayNote.getValue()) != 0);
        
        this.selectedKeyTools.setVisible(true);
        
        if (this.splitWindow.getRightComponent() == null) {
            this.splitWindow.setRightComponent(this.rightScrollPane);
            this.splitWindow.setDividerLocation(Math.max(this.splitWindow.getWidth()/2, this.splitWindow.getWidth()-500));
        }
    }
    
    @Override
    public void didUnselectKey() {
        this.keyNameField.setText("Nom de la touche");
        
        this.selectedKeyTools.setVisible(false);
        
        if (this.splitWindow.getRightComponent() != null) {
            this.splitWindow.setRightComponent(null);
        }
        
    }

    @Override
    public void shouldRedraw() {
        this.canvas.repaint();
    }
}
